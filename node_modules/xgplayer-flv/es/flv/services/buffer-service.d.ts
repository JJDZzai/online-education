export class BufferService {
    /**
     * @param {import('../index').Flv} flv
     * @param {Object} [softVideo]
     */
    constructor(flv: import('../index').Flv, softVideo?: any, opts: any);
    /** @type {import('../index').Flv | null} */
    flv: import('../index').Flv | null;
    _demuxer: FlvDemuxer;
    _remuxer: any;
    _mse: any;
    _softVideo: any;
    _sourceCreated: boolean;
    _needInitSegment: boolean;
    _discontinuity: boolean;
    _contiguous: boolean;
    _initSegmentId: string;
    _cachedBuffer: any;
    _demuxStartTime: number;
    _opts: any;
    get baseDts(): number;
    seamlessSwitch(): void;
    unContiguous(startTime: any): void;
    reset(reuseMse?: boolean): Promise<void>;
    endOfStream(): Promise<void>;
    updateDuration(duration: any): Promise<void>;
    destroy(): Promise<void>;
    appendBuffer(chunk: any): Promise<any[]>;
    evictBuffer(bufferBehind: any): Promise<any>;
    _emitMetaParsedEvent(videoTrack: any, audioTrack: any): void;
    _fireEvents(videoTrack: any, audioTrack: any, metadataTrack: any): void;
}
import { FlvDemuxer } from "../../../../xgplayer-transmuxer/es/flv";
