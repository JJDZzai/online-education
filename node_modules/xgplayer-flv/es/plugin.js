import { defineProperty as _defineProperty, inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, assertThisInitialized as _assertThisInitialized, objectSpread2 as _objectSpread2 } from "./_virtual/_rollupPluginBabelHelpers.js";
import { BasePlugin, Events, Errors } from "xgplayer";
import { EVENT } from "xgplayer-streaming-shared";
import { Flv } from "./flv/index.js";
import PluginExtension from "./plugin-extension.js";
var FlvPlugin = /* @__PURE__ */ function(_BasePlugin) {
  _inherits(FlvPlugin2, _BasePlugin);
  var _super = _createSuper(FlvPlugin2);
  function FlvPlugin2() {
    var _this;
    _classCallCheck(this, FlvPlugin2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "flv", null);
    _defineProperty(_assertThisInitialized(_this), "pluginExtension", null);
    _defineProperty(_assertThisInitialized(_this), "getStats", function() {
      var _this$flv;
      return (_this$flv = _this.flv) === null || _this$flv === void 0 ? void 0 : _this$flv.getStats();
    });
    _defineProperty(_assertThisInitialized(_this), "destroy", function() {
      var _this$pluginExtension;
      if (_this.flv) {
        _this.flv.destroy();
        _this.flv = null;
      }
      (_this$pluginExtension = _this.pluginExtension) === null || _this$pluginExtension === void 0 ? void 0 : _this$pluginExtension.destroy();
      _this.pluginExtension = null;
    });
    _defineProperty(_assertThisInitialized(_this), "_onSwitchURL", function(url, seamless) {
      if (_this.flv) {
        var _this$player$config, _this$player$config$f;
        _this.player.config.url = url;
        _this.flv.switchURL(url, seamless);
        if (!seamless && (_this$player$config = _this.player.config) !== null && _this$player$config !== void 0 && (_this$player$config$f = _this$player$config.flv) !== null && _this$player$config$f !== void 0 && _this$player$config$f.keepStatusAfterSwitch) {
          _this._keepPauseStatus();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_keepPauseStatus", function() {
      var paused = _this.player.paused;
      if (!paused)
        return;
      _this.player.once("canplay", function() {
        _this.player.pause();
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_onDefinitionChange", function(_ref) {
      var to = _ref.to;
      if (_this.flv)
        _this.flv.switchURL(to);
    });
    return _this;
  }
  _createClass(FlvPlugin2, [{
    key: "core",
    get: function get() {
      return this.flv;
    }
  }, {
    key: "version",
    get: function get() {
      var _this$flv2;
      return (_this$flv2 = this.flv) === null || _this$flv2 === void 0 ? void 0 : _this$flv2.version;
    }
  }, {
    key: "softDecode",
    get: function get() {
      var _this$player, _this$player$config2;
      var mediaType = (_this$player = this.player) === null || _this$player === void 0 ? void 0 : (_this$player$config2 = _this$player.config) === null || _this$player$config2 === void 0 ? void 0 : _this$player$config2.mediaType;
      return !!mediaType && mediaType !== "video" && mediaType !== "audio";
    }
  }, {
    key: "beforePlayerInit",
    value: function beforePlayerInit() {
      var _this2 = this;
      var config = this.player.config;
      if (!config.url)
        return;
      if (this.flv)
        this.flv.destroy();
      this.player.switchURL = this._onSwitchURL;
      var flvOpts = config.flv || {};
      if (flvOpts.disconnectTime === null || flvOpts.disconnectTime === void 0) {
        flvOpts.disconnectTime = 0;
      }
      this.flv = new Flv(_objectSpread2({
        softDecode: this.softDecode,
        isLive: config.isLive,
        media: this.player.video
      }, flvOpts));
      if (!this.softDecode) {
        BasePlugin.defineGetterOrSetter(this.player, {
          url: {
            get: function get() {
              var _this2$flv, _this2$flv$media;
              return (_this2$flv = _this2.flv) === null || _this2$flv === void 0 ? void 0 : (_this2$flv$media = _this2$flv.media) === null || _this2$flv$media === void 0 ? void 0 : _this2$flv$media.src;
            },
            configurable: true
          }
        });
      }
      if (this.softDecode) {
        this.pluginExtension = new PluginExtension(_objectSpread2({
          media: this.player.video
        }, config.flv), this);
        this.player.forceDegradeToVideo = function() {
          var _this2$pluginExtensio;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return (_this2$pluginExtensio = _this2.pluginExtension) === null || _this2$pluginExtensio === void 0 ? void 0 : _this2$pluginExtensio.forceDegradeToVideo.apply(_this2$pluginExtensio, args);
        };
      }
      if (config.isLive) {
        var _this$player2;
        (_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.useHooks("replay", function() {
          var _this2$flv2;
          return (_this2$flv2 = _this2.flv) === null || _this2$flv2 === void 0 ? void 0 : _this2$flv2.replay();
        });
      }
      this.on(Events.URL_CHANGE, this._onSwitchURL);
      this.on(Events.DESTROY, this.destroy);
      this._transError();
      this._transCoreEvent(EVENT.TTFB);
      this._transCoreEvent(EVENT.LOAD_START);
      this._transCoreEvent(EVENT.LOAD_RESPONSE_HEADERS);
      this._transCoreEvent(EVENT.LOAD_COMPLETE);
      this._transCoreEvent(EVENT.LOAD_RETRY);
      this._transCoreEvent(EVENT.SOURCEBUFFER_CREATED);
      this._transCoreEvent(EVENT.ANALYZE_DURATION_EXCEEDED);
      this._transCoreEvent(EVENT.REMOVE_BUFFER);
      this._transCoreEvent(EVENT.BUFFEREOS);
      this._transCoreEvent(EVENT.KEYFRAME);
      this._transCoreEvent(EVENT.METADATA_PARSED);
      this._transCoreEvent(EVENT.SEI);
      this._transCoreEvent(EVENT.SEI_IN_TIME);
      this._transCoreEvent(EVENT.FLV_SCRIPT_DATA);
      this._transCoreEvent(EVENT.STREAM_EXCEPTION);
      this._transCoreEvent(EVENT.SWITCH_URL_SUCCESS);
      this._transCoreEvent(EVENT.SWITCH_URL_FAILED);
      this.flv.load(config.url, true);
    }
  }, {
    key: "_transError",
    value: function _transError() {
      var _this3 = this;
      this.flv.on(EVENT.ERROR, function(err) {
        if (_this3.player) {
          _this3.player.emit(Events.ERROR, new Errors(_this3.player, err));
        }
      });
    }
  }, {
    key: "_transCoreEvent",
    value: function _transCoreEvent(eventName) {
      var _this4 = this;
      this.flv.on(eventName, function(e) {
        if (_this4.player) {
          _this4.player.emit("core_event", _objectSpread2(_objectSpread2({}, e), {}, {
            eventName
          }));
        }
      });
    }
  }], [{
    key: "pluginName",
    get: function get() {
      return "flv";
    }
  }, {
    key: "isSupported",
    value: function isSupported(mediaType, codec) {
      return Flv.isSupported(mediaType, codec);
    }
  }]);
  return FlvPlugin2;
}(BasePlugin);
_defineProperty(FlvPlugin, "Flv", Flv);
export { FlvPlugin };
