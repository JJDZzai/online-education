declare var _default: {
    Logger: typeof Logger;
    isMediaPlaying(media: any): boolean;
    getVideoPlaybackQuality(video: any): {
        droppedVideoFrames?: undefined;
        totalVideoFrames?: undefined;
        creationTime?: undefined;
    } | {
        droppedVideoFrames: any;
        totalVideoFrames: any;
        creationTime: any;
    };
    concatUint8Array(...arr: Uint8Array[]): Uint8Array;
    sleep(t?: number): Promise<any>;
    GapService: typeof services.GapService;
    SeiService: typeof services.SeiService;
    BandwidthService: typeof services.BandwidthService;
    MediaStatsService: typeof services.MediaStatsService;
    EVENT: {
        ERROR: string;
        TTFB: string;
        LOAD_START: string;
        LOAD_RESPONSE_HEADERS: string;
        LOAD_COMPLETE: string;
        LOAD_RETRY: string;
        SOURCEBUFFER_CREATED: string;
        ANALYZE_DURATION_EXCEEDED: string;
        REMOVE_BUFFER: string;
        BUFFEREOS: string;
        KEYFRAME: string;
        METADATA_PARSED: string;
        SEI: string;
        SEI_IN_TIME: string;
        FLV_SCRIPT_DATA: string;
        LOWDECODE: string;
        SWITCH_URL_SUCCESS: string;
        SWITCH_URL_FAILED: string;
        SPEED: string;
        HLS_MANIFEST_LOADED: string;
        HLS_LEVEL_LOADED: string;
        DEMUXED_TRACK: string;
        STREAM_EXCEPTION: string;
        LARGE_AV_FIRST_FRAME_GAP_DETECT: string;
        LARGE_VIDEO_DTS_GAP_DETECT: string;
        LARGE_AUDIO_DTS_GAP_DETECT: string;
        AUDIO_GAP_DETECT: string;
        AUDIO_OVERLAP_DETECT: string;
        MAX_DTS_DELTA_WITH_NEXT_SEGMENT_DETECT: string;
        REAL_TIME_SPEED: string;
    };
    ERR: {
        MANIFEST: string;
        NETWORK: string;
        NETWORK_TIMEOUT: string;
        NETWORK_FORBIDDEN: string;
        NETWROK_RANGE_NOT_SATISFIABLE: string;
        DEMUX: string;
        REMUX: string;
        MEDIA: string;
        DRM: string;
        OTHER: string;
        RUNTIME: string;
        SUB_TYPES: {
            FLV: string;
            HLS: string;
            MP4: string;
            FMP4: string;
            MSE_ADD_SB: string;
            MSE_APPEND_BUFFER: string;
            MSE_OTHER: string;
            MSE_FULL: string;
            OPTION: string;
            DASH: string;
            LICENSE: string;
            CUSTOM_LICENSE: string;
            MSE_HIJACK: string;
            EME_HIJACK: string;
            SIDX: string;
            NO_CANPLAY_ERROR: string;
            BUFFERBREAK_ERROR: string;
            MEDIA_ERR_ABORTED: string;
            MEDIA_ERR_NETWORK: string;
            MEDIA_ERR_DECODE: string;
            MEDIA_ERR_SRC_NOT_SUPPORTED: string;
            MEDIA_ERR_CODEC_NOT_SUPPORTED: string;
            MEDIA_ERR_URL_EMPTY: string;
        };
    };
    ERR_CODE: {
        [x: string]: number | {
            HLS: number;
            DASH: number;
            FLV?: undefined;
            MP4?: undefined;
            FMP4?: undefined;
            SIDX?: undefined;
            MEDIA_ERR_ABORTED?: undefined;
            MEDIA_ERR_NETWORK?: undefined;
            MEDIA_ERR_DECODE?: undefined;
            MEDIA_ERR_SRC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_CODEC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_URL_EMPTY?: undefined;
            MSE_ADD_SB?: undefined;
            MSE_APPEND_BUFFER?: undefined;
            MSE_OTHER?: undefined;
            MSE_FULL?: undefined;
            MSE_HIJACK?: undefined;
            EME_HIJACK?: undefined;
            LICENSE?: undefined;
            CUSTOM_LICENSE?: undefined;
            NO_CANPLAY_ERROR?: undefined;
            BUFFERBREAK_ERROR?: undefined;
        } | {
            FLV: number;
            HLS: number;
            MP4: number;
            FMP4: number;
            SIDX: number;
            DASH?: undefined;
            MEDIA_ERR_ABORTED?: undefined;
            MEDIA_ERR_NETWORK?: undefined;
            MEDIA_ERR_DECODE?: undefined;
            MEDIA_ERR_SRC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_CODEC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_URL_EMPTY?: undefined;
            MSE_ADD_SB?: undefined;
            MSE_APPEND_BUFFER?: undefined;
            MSE_OTHER?: undefined;
            MSE_FULL?: undefined;
            MSE_HIJACK?: undefined;
            EME_HIJACK?: undefined;
            LICENSE?: undefined;
            CUSTOM_LICENSE?: undefined;
            NO_CANPLAY_ERROR?: undefined;
            BUFFERBREAK_ERROR?: undefined;
        } | {
            FMP4: number;
            MP4: number;
            HLS?: undefined;
            DASH?: undefined;
            FLV?: undefined;
            SIDX?: undefined;
            MEDIA_ERR_ABORTED?: undefined;
            MEDIA_ERR_NETWORK?: undefined;
            MEDIA_ERR_DECODE?: undefined;
            MEDIA_ERR_SRC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_CODEC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_URL_EMPTY?: undefined;
            MSE_ADD_SB?: undefined;
            MSE_APPEND_BUFFER?: undefined;
            MSE_OTHER?: undefined;
            MSE_FULL?: undefined;
            MSE_HIJACK?: undefined;
            EME_HIJACK?: undefined;
            LICENSE?: undefined;
            CUSTOM_LICENSE?: undefined;
            NO_CANPLAY_ERROR?: undefined;
            BUFFERBREAK_ERROR?: undefined;
        } | {
            MEDIA_ERR_ABORTED: number;
            MEDIA_ERR_NETWORK: number;
            MEDIA_ERR_DECODE: number;
            MEDIA_ERR_SRC_NOT_SUPPORTED: number;
            MEDIA_ERR_CODEC_NOT_SUPPORTED: number;
            MEDIA_ERR_URL_EMPTY: number;
            MSE_ADD_SB: number;
            MSE_APPEND_BUFFER: number;
            MSE_OTHER: number;
            MSE_FULL: number;
            MSE_HIJACK: number;
            EME_HIJACK: number;
            HLS?: undefined;
            DASH?: undefined;
            FLV?: undefined;
            MP4?: undefined;
            FMP4?: undefined;
            SIDX?: undefined;
            LICENSE?: undefined;
            CUSTOM_LICENSE?: undefined;
            NO_CANPLAY_ERROR?: undefined;
            BUFFERBREAK_ERROR?: undefined;
        } | {
            LICENSE: number;
            CUSTOM_LICENSE: number;
            HLS?: undefined;
            DASH?: undefined;
            FLV?: undefined;
            MP4?: undefined;
            FMP4?: undefined;
            SIDX?: undefined;
            MEDIA_ERR_ABORTED?: undefined;
            MEDIA_ERR_NETWORK?: undefined;
            MEDIA_ERR_DECODE?: undefined;
            MEDIA_ERR_SRC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_CODEC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_URL_EMPTY?: undefined;
            MSE_ADD_SB?: undefined;
            MSE_APPEND_BUFFER?: undefined;
            MSE_OTHER?: undefined;
            MSE_FULL?: undefined;
            MSE_HIJACK?: undefined;
            EME_HIJACK?: undefined;
            NO_CANPLAY_ERROR?: undefined;
            BUFFERBREAK_ERROR?: undefined;
        } | {
            NO_CANPLAY_ERROR: number;
            BUFFERBREAK_ERROR: number;
            HLS?: undefined;
            DASH?: undefined;
            FLV?: undefined;
            MP4?: undefined;
            FMP4?: undefined;
            SIDX?: undefined;
            MEDIA_ERR_ABORTED?: undefined;
            MEDIA_ERR_NETWORK?: undefined;
            MEDIA_ERR_DECODE?: undefined;
            MEDIA_ERR_SRC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_CODEC_NOT_SUPPORTED?: undefined;
            MEDIA_ERR_URL_EMPTY?: undefined;
            MSE_ADD_SB?: undefined;
            MSE_APPEND_BUFFER?: undefined;
            MSE_OTHER?: undefined;
            MSE_FULL?: undefined;
            MSE_HIJACK?: undefined;
            EME_HIJACK?: undefined;
            LICENSE?: undefined;
            CUSTOM_LICENSE?: undefined;
        };
    };
    StreamingError: typeof error.StreamingError;
    LoaderType: {
        FETCH: string;
        XHR: string;
    };
    ResponseType: {
        ARRAY_BUFFER: string;
        TEXT: string;
        JSON: string;
    };
    NetLoader: typeof net.NetLoader;
    Buffer: typeof buffer.Buffer;
    MSEErrorType: {
        UPDATE_ERROR: string;
    };
    MSEError: typeof mse.MSEError;
    MSE: typeof mse.MSE;
};
export default _default;
import { Logger } from "./logger";
import * as services from "./services";
import * as error from "./error";
import * as net from "./net";
import * as buffer from "./buffer";
import * as mse from "./mse";
