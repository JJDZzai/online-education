import { defineProperty as _defineProperty, createClass as _createClass, classCallCheck as _classCallCheck, typeof as _typeof } from "./_virtual/_rollupPluginBabelHelpers.js";
var LogCacheLevel = {
  "DEBUG": 1,
  "LOG": 2,
  "WARN": 3,
  "ERROR": 4
};
var LOG_MAX_SIZE = 200 * 1024;
var SIMPLE_TYPE = ["Boolean", "Number", "String", "Undefined", "Null", "Date", "Object"];
var Logger = /* @__PURE__ */ function() {
  function Logger2(name, config) {
    _classCallCheck(this, Logger2);
    this.name = name || "";
    this._prefix = "[".concat(this.name, "]");
    Logger2.disabled = (config === null || config === void 0 ? void 0 : config.disabled) || true;
    this.logCacheLevel = (config === null || config === void 0 ? void 0 : config.logCacheLevel) || 3;
    this.logMaxSize = (config === null || config === void 0 ? void 0 : config.logMaxSize) || LOG_MAX_SIZE;
    this.logSize = 0;
    this.logTextArray = [];
  }
  _createClass(Logger2, [{
    key: "debug",
    value: function debug() {
      var _console;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.logCache.apply(this, [LogCacheLevel.DEBUG].concat(args));
      if (Logger2.disabled)
        return;
      (_console = console).debug.apply(_console, [this._prefix, nowTime()].concat(args));
    }
  }, {
    key: "log",
    value: function log() {
      var _console2;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      this.logCache.apply(this, [LogCacheLevel.LOG].concat(args));
      if (Logger2.disabled)
        return;
      (_console2 = console).log.apply(_console2, [this._prefix, nowTime()].concat(args));
    }
  }, {
    key: "warn",
    value: function warn() {
      var _console3;
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this.logCache.apply(this, [LogCacheLevel.WARN].concat(args));
      if (Logger2.disabled)
        return;
      (_console3 = console).warn.apply(_console3, [this._prefix, nowTime()].concat(args));
    }
  }, {
    key: "error",
    value: function error() {
      var _console4;
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      this.logCache.apply(this, [LogCacheLevel.ERROR].concat(args));
      if (Logger2.disabled)
        return;
      (_console4 = console).error.apply(_console4, [this._prefix, nowTime()].concat(args));
    }
  }, {
    key: "logCache",
    value: function logCache(logCacheLevel) {
      if (logCacheLevel < this.logCacheLevel)
        return;
      var text = "";
      try {
        for (var _len5 = arguments.length, logText = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          logText[_key5 - 1] = arguments[_key5];
        }
        var finLogText = logText.map(function(item) {
          return logable(item);
        });
        text = this._prefix + nowTime() + JSON.stringify(finLogText);
      } catch (e) {
        return;
      }
      if (logCacheLevel >= this.logCacheLevel) {
        this.logSize += text.length;
        this.logTextArray.push(text);
      }
      if (this.logSize > this.logMaxSize) {
        var delLog = this.logTextArray.shift();
        this.logSize -= delLog.length;
      }
    }
  }, {
    key: "getLogCache",
    value: function getLogCache() {
      var logText = this.logTextArray.join("\n");
      this.reset();
      return logText;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.logTextArray = [];
      this.logSize = 0;
    }
  }, {
    key: "table",
    value: function table() {
      var _console5;
      if (Logger2.disabled)
        return;
      console.group(this._prefix);
      (_console5 = console).table.apply(_console5, arguments);
      console.groupEnd();
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(val) {
      this.logCacheLevel = val;
    }
  }], [{
    key: "enable",
    value: function enable() {
      Logger2.disabled = false;
    }
  }, {
    key: "disable",
    value: function disable() {
      Logger2.disabled = true;
    }
  }]);
  return Logger2;
}();
_defineProperty(Logger, "disabled", true);
function nowTime() {
  return new Date().toLocaleString();
}
function reduceDepth(val) {
  if (_typeof(val) !== "object") {
    return val;
  }
  var objType = Object.prototype.toString.call(val).slice(8, -1);
  switch (objType) {
    case "Array":
    case "Uint8Array":
    case "ArrayBuffer":
      return objType + "[" + val.length + "]";
    case "Object":
      return "{}";
    default:
      return objType;
  }
}
function logable(obj, maxDepth, depth) {
  if (!depth)
    depth = 1;
  if (!maxDepth)
    maxDepth = 2;
  var result = {};
  if (!obj || _typeof(obj) !== "object") {
    return obj;
  }
  var objType = Object.prototype.toString.call(obj).slice(8, -1);
  if (!SIMPLE_TYPE.includes(objType)) {
    return objType;
  }
  if (depth > maxDepth) {
    return void 0;
  }
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      if (depth === maxDepth) {
        result[key] = reduceDepth(obj[key]);
      } else if (_typeof(obj[key]) === "object") {
        result[key] = logable(obj[key], maxDepth, depth + 1);
      } else {
        result[key] = obj[key];
      }
    }
  }
  return result;
}
export { LogCacheLevel, Logger };
