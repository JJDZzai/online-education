export class FetchLoader {
    static isSupported(): boolean;
    _abortController: any;
    _timeoutTimer: any;
    _reader: any;
    _response: any;
    _aborted: boolean;
    _index: number;
    _range: any;
    _receivedLength: number;
    _running: boolean;
    _logger: any;
    _vid: string;
    _onProcessMinLen: number;
    _onCancel: any;
    _priOptions: any;
    load({ url, vid, timeout, responseType, onProgress, index, onTimeout, onCancel, range, transformResponse, request, params, logger, method, headers, body, mode, credentials, cache, redirect, referrer, referrerPolicy, onProcessMinLen, priOptions }: {
        url: any;
        vid: any;
        timeout: any;
        responseType: any;
        onProgress: any;
        index: any;
        onTimeout: any;
        onCancel: any;
        range: any;
        transformResponse: any;
        request: any;
        params: any;
        logger: any;
        method: any;
        headers: any;
        body: any;
        mode: any;
        credentials: any;
        cache: any;
        redirect: any;
        referrer: any;
        referrerPolicy: any;
        onProcessMinLen: any;
        priOptions: any;
    }): Promise<any>;
    resolve: (value: any) => void;
    reject: (reason?: any) => void;
    cancel(): Promise<void>;
    _loadChunk(response: any, onProgress: any, st: any, firstByteTime: any): void;
    _cache: Uint8Array;
    _writeIdx: number;
    get receiveLen(): number;
    set running(arg: boolean);
    get running(): boolean;
}
