import { inherits as _inherits, createSuper as _createSuper, classCallCheck as _classCallCheck, defineProperty as _defineProperty, assertThisInitialized as _assertThisInitialized, createClass as _createClass, asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime } from "../_virtual/_rollupPluginBabelHelpers.js";
import { NetError } from "./error.js";
import { setUrlParams, getRangeValue, createResponse, calculateSpeed } from "./helper.js";
import { ResponseType } from "./types.js";
import { EVENT } from "../event.js";
import EventEmitter from "eventemitter3";
var CACHESIZE = 2 * 1024 * 1024;
var FetchLoader = /* @__PURE__ */ function(_EventEmitter) {
  _inherits(FetchLoader2, _EventEmitter);
  var _super = _createSuper(FetchLoader2);
  function FetchLoader2() {
    var _this;
    _classCallCheck(this, FetchLoader2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_abortController", null);
    _defineProperty(_assertThisInitialized(_this), "_timeoutTimer", null);
    _defineProperty(_assertThisInitialized(_this), "_reader", null);
    _defineProperty(_assertThisInitialized(_this), "_response", null);
    _defineProperty(_assertThisInitialized(_this), "_aborted", false);
    _defineProperty(_assertThisInitialized(_this), "_index", -1);
    _defineProperty(_assertThisInitialized(_this), "_range", null);
    _defineProperty(_assertThisInitialized(_this), "_receivedLength", 0);
    _defineProperty(_assertThisInitialized(_this), "_running", false);
    _defineProperty(_assertThisInitialized(_this), "_logger", null);
    _defineProperty(_assertThisInitialized(_this), "_vid", "");
    _defineProperty(_assertThisInitialized(_this), "_onProcessMinLen", 0);
    _defineProperty(_assertThisInitialized(_this), "_onCancel", null);
    _defineProperty(_assertThisInitialized(_this), "_priOptions", null);
    return _this;
  }
  _createClass(FetchLoader2, [{
    key: "load",
    value: function load(_ref) {
      var _this$_abortControlle, _this2 = this;
      var url = _ref.url, vid = _ref.vid, timeout = _ref.timeout, responseType = _ref.responseType, onProgress = _ref.onProgress, index = _ref.index, onTimeout = _ref.onTimeout, onCancel = _ref.onCancel, range = _ref.range, transformResponse = _ref.transformResponse, request = _ref.request, params = _ref.params, logger = _ref.logger, method = _ref.method, headers = _ref.headers, body = _ref.body, mode = _ref.mode, credentials = _ref.credentials, cache = _ref.cache, redirect = _ref.redirect, referrer = _ref.referrer, referrerPolicy = _ref.referrerPolicy, onProcessMinLen = _ref.onProcessMinLen, priOptions = _ref.priOptions;
      this._logger = logger;
      this._aborted = false;
      this._onProcessMinLen = onProcessMinLen;
      this._onCancel = onCancel;
      this._abortController = typeof AbortController !== "undefined" && new AbortController();
      this._running = true;
      this._index = index;
      this._range = range || [0, 0];
      this._vid = vid || url;
      this._priOptions = priOptions || {};
      var init = {
        method,
        headers,
        body,
        mode,
        credentials,
        cache,
        redirect,
        referrer,
        referrerPolicy,
        signal: (_this$_abortControlle = this._abortController) === null || _this$_abortControlle === void 0 ? void 0 : _this$_abortControlle.signal
      };
      var isTimeout = false;
      clearTimeout(this._timeoutTimer);
      url = setUrlParams(url, params);
      var rangeValue = getRangeValue(range);
      if (rangeValue) {
        if (request) {
          headers = request.headers;
        } else {
          headers = init.headers = init.headers || (Headers ? new Headers() : {});
        }
        if (Headers && headers instanceof Headers) {
          headers.append("Range", rangeValue);
        } else {
          headers.Range = rangeValue;
        }
      }
      if (timeout) {
        this._timeoutTimer = setTimeout(function() {
          isTimeout = true;
          _this2.cancel();
          if (onTimeout) {
            var error = new NetError(url, init, null, "timeout");
            error.isTimeout = true;
            onTimeout(error, {
              index: _this2._index,
              range: _this2._range,
              vid: _this2._vid,
              priOptions: _this2._priOptions
            });
          }
        }, timeout);
      }
      var startTime = Date.now();
      this._logger.debug("[fetch load start], index,", index, ",range,", range);
      return new Promise(function(resolve, reject) {
        fetch(request || url, request ? void 0 : init).then(/* @__PURE__ */ function() {
          var _ref2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(response) {
            var firstByteTime, data, costTime, speed;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    clearTimeout(_this2._timeoutTimer);
                    _this2._response = response;
                    if (!(_this2._aborted || !_this2._running)) {
                      _context.next = 4;
                      break;
                    }
                    return _context.abrupt("return");
                  case 4:
                    if (transformResponse) {
                      response = transformResponse(response, url) || response;
                    }
                    if (response.ok) {
                      _context.next = 7;
                      break;
                    }
                    throw new NetError(url, init, response, "bad network response");
                  case 7:
                    firstByteTime = Date.now();
                    if (!(responseType === ResponseType.TEXT)) {
                      _context.next = 15;
                      break;
                    }
                    _context.next = 11;
                    return response.text();
                  case 11:
                    data = _context.sent;
                    _this2._running = false;
                    _context.next = 37;
                    break;
                  case 15:
                    if (!(responseType === ResponseType.JSON)) {
                      _context.next = 22;
                      break;
                    }
                    _context.next = 18;
                    return response.json();
                  case 18:
                    data = _context.sent;
                    _this2._running = false;
                    _context.next = 37;
                    break;
                  case 22:
                    if (!onProgress) {
                      _context.next = 29;
                      break;
                    }
                    _this2.resolve = resolve;
                    _this2.reject = reject;
                    _this2._loadChunk(response, onProgress, startTime, firstByteTime);
                    return _context.abrupt("return");
                  case 29:
                    _context.next = 31;
                    return response.arrayBuffer();
                  case 31:
                    data = _context.sent;
                    data = new Uint8Array(data);
                    _this2._running = false;
                    costTime = Date.now() - startTime;
                    speed = calculateSpeed(data.byteLength, costTime);
                    _this2.emit(EVENT.REAL_TIME_SPEED, {
                      speed,
                      len: data.byteLength,
                      time: costTime,
                      vid: _this2._vid,
                      index: _this2._index,
                      range: _this2._range,
                      priOptions: _this2._priOptions
                    });
                  case 37:
                    _this2._logger.debug("[fetch load end], index,", index, ",range,", range);
                    resolve(createResponse(data, true, response, response.headers.get("Content-Length"), response.headers.get("age"), startTime, firstByteTime, index, range, _this2._vid, _this2._priOptions));
                  case 39:
                  case "end":
                    return _context.stop();
                }
            }, _callee);
          }));
          return function(_x) {
            return _ref2.apply(this, arguments);
          };
        }()).catch(function(error) {
          var _error;
          clearTimeout(_this2._timeoutTimer);
          _this2._running = false;
          if (_this2._aborted && !isTimeout)
            return;
          error = error instanceof NetError ? error : new NetError(url, init, null, (_error = error) === null || _error === void 0 ? void 0 : _error.message);
          error.startTime = startTime;
          error.endTime = Date.now();
          error.isTimeout = isTimeout;
          error.options = {
            index: _this2._index,
            range: _this2._range,
            vid: _this2._vid,
            priOptions: _this2._priOptions
          };
          reject(error);
        });
      });
    }
  }, {
    key: "cancel",
    value: function() {
      var _cancel = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1)
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this._aborted) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return");
              case 2:
                this._aborted = true;
                this._running = false;
                if (!this._response) {
                  _context2.next = 14;
                  break;
                }
                _context2.prev = 5;
                if (!this._reader) {
                  _context2.next = 9;
                  break;
                }
                _context2.next = 9;
                return this._reader.cancel();
              case 9:
                _context2.next = 13;
                break;
              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](5);
              case 13:
                this._response = this._reader = null;
              case 14:
                if (this._abortController) {
                  try {
                    this._abortController.abort();
                  } catch (error) {
                  }
                  this._abortController = null;
                }
                if (this._onCancel) {
                  this._onCancel({
                    index: this._index,
                    range: this._range,
                    vid: this._vid,
                    priOptions: this._priOptions
                  });
                }
              case 16:
              case "end":
                return _context2.stop();
            }
        }, _callee2, this, [[5, 11]]);
      }));
      function cancel() {
        return _cancel.apply(this, arguments);
      }
      return cancel;
    }()
  }, {
    key: "_loadChunk",
    value: function _loadChunk(response, onProgress, st, firstByteTime) {
      var _this3 = this;
      if (!response.body || !response.body.getReader) {
        this._running = false;
        var err = new NetError(response.url, "", response, "onProgress of bad response.body.getReader");
        err.options = {
          index: this._index,
          range: this._range,
          vid: this._vid,
          priOptions: this._priOptions
        };
        this.reject(err);
        return;
      }
      if (this._onProcessMinLen > 0) {
        this._cache = new Uint8Array(CACHESIZE);
        this._writeIdx = 0;
      }
      var reader = this._reader = response.body.getReader();
      var data;
      var startTime;
      var endTime;
      var pump = /* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3() {
          var _this3$_range;
          var startRange, startByte, curLen, retData, temp, costTime, speed;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1)
              switch (_context3.prev = _context3.next) {
                case 0:
                  startTime = Date.now();
                  _context3.prev = 1;
                  _context3.next = 4;
                  return reader.read();
                case 4:
                  data = _context3.sent;
                  endTime = Date.now();
                  _context3.next = 13;
                  break;
                case 8:
                  _context3.prev = 8;
                  _context3.t0 = _context3["catch"](1);
                  endTime = Date.now();
                  if (!_this3._aborted) {
                    _this3._running = false;
                    _context3.t0.options = {
                      index: _this3._index,
                      range: _this3._range,
                      vid: _this3._vid,
                      priOptions: _this3._priOptions
                    };
                    _this3.reject(_context3.t0);
                  }
                  return _context3.abrupt("return");
                case 13:
                  startRange = ((_this3$_range = _this3._range) === null || _this3$_range === void 0 ? void 0 : _this3$_range.length) > 0 ? _this3._range[0] : 0;
                  startByte = startRange + _this3._receivedLength;
                  if (!_this3._aborted) {
                    _context3.next = 19;
                    break;
                  }
                  _this3._running = false;
                  onProgress(void 0, false, {
                    range: [startByte, startByte],
                    vid: _this3._vid,
                    index: _this3._index,
                    startTime,
                    endTime,
                    st,
                    firstByteTime,
                    priOptions: _this3._priOptions
                  }, response);
                  return _context3.abrupt("return");
                case 19:
                  curLen = data.value ? data.value.byteLength : 0;
                  _this3._receivedLength += curLen;
                  _this3._logger.debug("\u3010fetchLoader,onProgress call\u3011,task,", _this3._range, ", start,", startByte, ", end,", startRange + _this3._receivedLength, ", done,", data.done);
                  if (_this3._onProcessMinLen > 0) {
                    if (_this3._writeIdx + curLen >= _this3._onProcessMinLen || data.done) {
                      retData = new Uint8Array(_this3._writeIdx + curLen);
                      retData.set(_this3._cache.slice(0, _this3._writeIdx), 0);
                      curLen > 0 && retData.set(data.value, _this3._writeIdx);
                      _this3._writeIdx = 0;
                      _this3._logger.debug("\u3010fetchLoader,onProgress enough\u3011,done,", data.done, ",len,", retData.byteLength, ", writeIdx,", _this3._writeIdx);
                    } else {
                      if (curLen > 0 && _this3._writeIdx + curLen < CACHESIZE) {
                        _this3._cache.set(data.value, _this3._writeIdx);
                        _this3._writeIdx += curLen;
                        _this3._logger.debug("\u3010fetchLoader,onProgress cache\u3011,len,", curLen, ", writeIdx,", _this3._writeIdx);
                      } else if (curLen > 0) {
                        temp = new Uint8Array(_this3._writeIdx + curLen + 2048);
                        _this3._logger.debug("\u3010fetchLoader,onProgress extra start\u3011,size,", _this3._writeIdx + curLen + 2048, ", datalen,", curLen, ", writeIdx,", _this3._writeIdx);
                        temp.set(_this3._cache.slice(0, _this3._writeIdx), 0);
                        curLen > 0 && temp.set(data.value, _this3._writeIdx);
                        _this3._writeIdx += curLen;
                        delete _this3._cache;
                        _this3._cache = temp;
                        _this3._logger.debug("\u3010fetchLoader,onProgress extra end\u3011,len,", curLen, ", writeIdx,", _this3._writeIdx);
                      }
                    }
                  } else {
                    retData = data.value;
                  }
                  if (retData && retData.byteLength > 0 || data.done) {
                    onProgress(retData, data.done, {
                      range: [_this3._range[0] + _this3._receivedLength - (retData ? retData.byteLength : 0), _this3._range[0] + _this3._receivedLength],
                      vid: _this3._vid,
                      index: _this3._index,
                      startTime,
                      endTime,
                      st,
                      firstByteTime,
                      priOptions: _this3._priOptions
                    }, response);
                  }
                  if (!data.done) {
                    pump();
                  } else {
                    costTime = Date.now() - st;
                    speed = calculateSpeed(_this3._receivedLength, costTime);
                    _this3.emit(EVENT.REAL_TIME_SPEED, {
                      speed,
                      len: _this3._receivedLength,
                      time: costTime,
                      vid: _this3._vid,
                      index: _this3._index,
                      range: _this3._range,
                      priOptions: _this3._priOptions
                    });
                    _this3._running = false;
                    _this3._logger.debug("[fetchLoader onProgress end],task,", _this3._range, ",done,", data.done);
                    _this3.resolve(createResponse(data, true, response, response.headers.get("Content-Length"), response.headers.get("age"), st, firstByteTime, _this3._index, _this3._range, _this3._vid, _this3._priOptions));
                  }
                case 25:
                case "end":
                  return _context3.stop();
              }
          }, _callee3, null, [[1, 8]]);
        }));
        return function pump2() {
          return _ref3.apply(this, arguments);
        };
      }();
      pump();
    }
  }, {
    key: "receiveLen",
    get: function get() {
      return this._receivedLength;
    }
  }, {
    key: "running",
    get: function get() {
      return this._running;
    },
    set: function set(status) {
      this._running = status;
    }
  }], [{
    key: "isSupported",
    value: function isSupported() {
      return !!(typeof fetch !== "undefined");
    }
  }]);
  return FetchLoader2;
}(EventEmitter);
export { FetchLoader };
