import { inherits as _inherits, createSuper as _createSuper, classCallCheck as _classCallCheck, defineProperty as _defineProperty, assertThisInitialized as _assertThisInitialized, createClass as _createClass, objectSpread2 as _objectSpread2, get as _get, getPrototypeOf as _getPrototypeOf, createForOfIteratorHelper as _createForOfIteratorHelper } from "../_virtual/_rollupPluginBabelHelpers.js";
import { NetError } from "./error.js";
import { setUrlParams, getRangeValue, calculateSpeed, createResponse } from "./helper.js";
import { ResponseType } from "./types.js";
import { EVENT } from "../event.js";
import EventEmitter from "eventemitter3";
var XhrLoader = /* @__PURE__ */ function(_EventEmitter) {
  _inherits(XhrLoader2, _EventEmitter);
  var _super = _createSuper(XhrLoader2);
  function XhrLoader2() {
    var _this;
    _classCallCheck(this, XhrLoader2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_xhr", null);
    _defineProperty(_assertThisInitialized(_this), "_aborted", false);
    _defineProperty(_assertThisInitialized(_this), "_timeoutTimer", null);
    _defineProperty(_assertThisInitialized(_this), "_range", null);
    _defineProperty(_assertThisInitialized(_this), "_receivedLength", 0);
    _defineProperty(_assertThisInitialized(_this), "_url", null);
    _defineProperty(_assertThisInitialized(_this), "_onProgress", null);
    _defineProperty(_assertThisInitialized(_this), "_index", -1);
    _defineProperty(_assertThisInitialized(_this), "_headers", null);
    _defineProperty(_assertThisInitialized(_this), "_currentChunkSizeKB", 384);
    _defineProperty(_assertThisInitialized(_this), "_timeout", null);
    _defineProperty(_assertThisInitialized(_this), "_xhr", null);
    _defineProperty(_assertThisInitialized(_this), "_withCredentials", null);
    _defineProperty(_assertThisInitialized(_this), "_startTime", -1);
    _defineProperty(_assertThisInitialized(_this), "_loadCompleteResolve", null);
    _defineProperty(_assertThisInitialized(_this), "_loadCompleteReject", null);
    _defineProperty(_assertThisInitialized(_this), "_runing", false);
    _defineProperty(_assertThisInitialized(_this), "_logger", false);
    _defineProperty(_assertThisInitialized(_this), "_vid", "");
    _defineProperty(_assertThisInitialized(_this), "_responseType", void 0);
    _defineProperty(_assertThisInitialized(_this), "_credentials", void 0);
    _defineProperty(_assertThisInitialized(_this), "_method", void 0);
    _defineProperty(_assertThisInitialized(_this), "_transformResponse", void 0);
    _defineProperty(_assertThisInitialized(_this), "_firstRtt", void 0);
    _defineProperty(_assertThisInitialized(_this), "_onCancel", null);
    _defineProperty(_assertThisInitialized(_this), "_priOptions", null);
    return _this;
  }
  _createClass(XhrLoader2, [{
    key: "load",
    value: function load(req) {
      var _this2 = this;
      clearTimeout(this._timeoutTimer);
      this._logger = req.logger;
      this._range = req.range;
      this._onProgress = req.onProgress;
      this._index = req.index;
      this._headers = req.headers;
      this._withCredentials = req.credentials === "include" || req.credentials === "same-origin";
      this._body = req.body || null;
      req.method && (this._method = req.method);
      this._timeout = req.timeout || null;
      this._runing = true;
      this._vid = req.vid || req.url;
      this._responseType = req.responseType;
      this._firstRtt = -1;
      this._onTimeout = req.onTimeout;
      this._onCancel = req.onCancel;
      this._request = req.request;
      this._priOptions = req.priOptions || {};
      this._logger.debug("\u3010xhrLoader task\u3011, range", this._range);
      this._url = setUrlParams(req.url, req.params);
      var startTime = Date.now();
      return new Promise(function(resolve, reject) {
        _this2._loadCompleteResolve = resolve;
        _this2._loadCompleteReject = reject;
        _this2._startLoad();
      }).catch(function(error) {
        clearTimeout(_this2._timeoutTimer);
        _this2._runing = false;
        if (_this2._aborted)
          return;
        error = error instanceof NetError ? error : new NetError(_this2._url, _this2._request);
        error.startTime = startTime;
        error.endTime = Date.now();
        error.options = {
          index: _this2._index,
          vid: _this2._vid,
          priOptions: _this2._priOptions
        };
        throw error;
      });
    }
  }, {
    key: "_startLoad",
    value: function _startLoad() {
      var range = null;
      if (this._responseType === ResponseType.ARRAY_BUFFER && this._range && this._range.length > 1) {
        if (this._onProgress) {
          this._firstRtt = -1;
          var chunkSize = this._currentChunkSizeKB * 1024;
          var from = this._range[0] + this._receivedLength;
          var to = this._range[1];
          if (chunkSize < this._range[1] - from) {
            to = from + chunkSize;
          }
          range = [from, to];
          this._logger.debug("[xhr_loader->],tast :", this._range, ", SubRange, ", range);
        } else {
          range = this._range;
          this._logger.debug("[xhr_loader->],tast :", this._range, ", allRange, ", range);
        }
      }
      this._internalOpen(range);
    }
  }, {
    key: "_internalOpen",
    value: function _internalOpen(range) {
      var _this3 = this;
      try {
        this._startTime = Date.now();
        var xhr = this._xhr = new XMLHttpRequest();
        xhr.open(this._method || "GET", this._url, true);
        xhr.responseType = this._responseType;
        this._timeout && (xhr.timeout = this._timeout);
        xhr.withCredentials = this._withCredentials;
        xhr.onload = this._onLoad.bind(this);
        xhr.onreadystatechange = this._onReadyStatechange.bind(this);
        xhr.onerror = function(errorEvent) {
          var _errorEvent$currentTa, _errorEvent$currentTa2, _errorEvent$currentTa3;
          _this3._running = false;
          var error = new NetError(_this3._url, _this3._request, errorEvent === null || errorEvent === void 0 ? void 0 : (_errorEvent$currentTa = errorEvent.currentTarget) === null || _errorEvent$currentTa === void 0 ? void 0 : _errorEvent$currentTa.response, "xhr.onerror.status:" + (errorEvent === null || errorEvent === void 0 ? void 0 : (_errorEvent$currentTa2 = errorEvent.currentTarget) === null || _errorEvent$currentTa2 === void 0 ? void 0 : _errorEvent$currentTa2.status) + ",statusText," + (errorEvent === null || errorEvent === void 0 ? void 0 : (_errorEvent$currentTa3 = errorEvent.currentTarget) === null || _errorEvent$currentTa3 === void 0 ? void 0 : _errorEvent$currentTa3.statusText));
          error.options = {
            index: _this3._index,
            range: _this3._range,
            vid: _this3._vid,
            priOptions: _this3._priOptions
          };
          _this3._loadCompleteReject(error);
        };
        xhr.ontimeout = function(event) {
          _this3.cancel();
          var error = new NetError(_this3._url, _this3._request, {
            status: 408
          }, "timeout");
          if (_this3._onTimeout) {
            error.isTimeout = true;
            _this3._onTimeout(error, {
              index: _this3._index,
              range: _this3._range,
              vid: _this3._vid,
              priOptions: _this3._priOptions
            });
          }
          error.options = {
            index: _this3._index,
            range: _this3._range,
            vid: _this3._vid,
            priOptions: _this3._priOptions
          };
          _this3._loadCompleteReject(error);
        };
        var headers = this._headers || {};
        var rangeValue = getRangeValue(range);
        if (rangeValue) {
          headers.Range = rangeValue;
        }
        if (headers) {
          Object.keys(headers).forEach(function(k) {
            xhr.setRequestHeader(k, headers[k]);
          });
        }
        this._logger.debug("[xhr.send->] tast,", this._range, ",load sub range, ", range);
        xhr.send(this._body);
      } catch (e) {
        e.options = {
          index: this._index,
          range,
          vid: this._vid,
          priOptions: this._priOptions
        };
        this._loadCompleteReject(e);
      }
    }
  }, {
    key: "_onReadyStatechange",
    value: function _onReadyStatechange(e) {
      var xhr = e.target;
      if (xhr.readyState === 2) {
        this._firstRtt < 0 && (this._firstRtt = Date.now());
      }
    }
  }, {
    key: "_onLoad",
    value: function _onLoad(e) {
      var _this$_range;
      var status = e.target.status;
      if (status < 200 || status > 299) {
        var error = new NetError(this._url, null, _objectSpread2(_objectSpread2({}, e.target.response), {}, {
          status
        }), "bad response,status:" + status);
        error.options = {
          index: this._index,
          range: this._range,
          vid: this._vid,
          priOptions: this._priOptions
        };
        return this._loadCompleteReject(error);
      }
      var data = null;
      var done = false;
      var byteStart;
      var startRange = ((_this$_range = this._range) === null || _this$_range === void 0 ? void 0 : _this$_range.length) > 0 ? this._range[0] : 0;
      if (this._responseType === ResponseType.ARRAY_BUFFER) {
        var _this$_range2;
        var chunk = new Uint8Array(e.target.response);
        byteStart = startRange + this._receivedLength;
        if (chunk && chunk.byteLength > 0) {
          this._receivedLength += chunk.byteLength;
          var costTime = Date.now() - this._startTime;
          var speed = calculateSpeed(this._receivedLength, costTime);
          this.emit(EVENT.REAL_TIME_SPEED, {
            speed,
            len: this._receivedLength,
            time: costTime,
            vid: this._vid,
            index: this._index,
            range: [byteStart, startRange + this._receivedLength],
            priOptions: this._priOptions
          });
        }
        data = chunk;
        if (((_this$_range2 = this._range) === null || _this$_range2 === void 0 ? void 0 : _this$_range2.length) > 1 && this._range[1] && this._receivedLength < this._range[1] - this._range[0]) {
          done = false;
        } else {
          done = true;
        }
        this._logger.debug("[xhr load done->], tast :", this._range, ", start", byteStart, "end ", startRange + this._receivedLength, ",dataLen,", chunk ? chunk.byteLength : 0, ",receivedLength", this._receivedLength, ",index,", this._index, ", done,", done);
      } else {
        done = true;
        data = e.target.response;
      }
      var response = {
        ok: status >= 200 && status < 300,
        status,
        statusText: this._xhr.statusText,
        url: this._xhr.responseURL,
        headers: this._getHeaders(this._xhr),
        body: this._xhr.response
      };
      if (this._transformResponse) {
        response = this._transformResponse(response, this._url) || response;
      }
      if (this._onProgress) {
        this._onProgress(data, done, {
          index: this._index,
          vid: this._vid,
          range: [byteStart, startRange + this._receivedLength],
          startTime: this._startTime,
          endTime: Date.now(),
          priOptions: this._priOptions
        }, response);
      }
      if (!done) {
        this._startLoad();
      } else {
        this._runing = false;
        this._loadCompleteResolve && this._loadCompleteResolve(createResponse(this._onProgress ? null : data, done, response, response.headers["content-length"], response.headers.age, this._startTime, this._firstRtt, this._index, this._range, this._vid, this._priOptions));
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this._aborted)
        return;
      this._aborted = true;
      this._runing = false;
      _get(_getPrototypeOf(XhrLoader2.prototype), "removeAllListeners", this).call(this);
      if (this._onCancel) {
        this._onCancel({
          index: this._index,
          range: this._range,
          vid: this._vid,
          priOptions: this._priOptions
        });
      }
      if (this._xhr) {
        return this._xhr.abort();
      }
    }
  }, {
    key: "receiveLen",
    get: function get() {
      return this._receivedLength;
    }
  }, {
    key: "running",
    get: function get() {
      return this._running;
    },
    set: function set(status) {
      this._running = status;
    }
  }, {
    key: "_getHeaders",
    value: function _getHeaders(xhr) {
      var headerLines = xhr.getAllResponseHeaders().trim().split("\r\n");
      var headers = {};
      var _iterator = _createForOfIteratorHelper(headerLines), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var header = _step.value;
          var parts = header.split(": ");
          headers[parts[0].toLowerCase()] = parts.slice(1).join(": ");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return headers;
    }
  }], [{
    key: "isSupported",
    value: function isSupported() {
      return typeof XMLHttpRequest !== "undefined";
    }
  }]);
  return XhrLoader2;
}(EventEmitter);
export { XhrLoader };
