export type StatsInfo = {
    downloadSpeed: number;
    avgSpeed: number;
    currentTime: number;
    bufferEnd: number;
    decodeFps: number;
    encodeType: string;
    audioCodec: string;
    videoCodec: string;
    domain: string;
    fps: number;
    bitrate: number;
    width: number;
    height: number;
    samplerate: number;
    channelCount: number;
    gop: number;
};
/**
 * @typedef {Object} StatsInfo
 * @property {number} downloadSpeed
 * @property {number} avgSpeed
 * @property {number} currentTime
 * @property {number} bufferEnd
 * @property {number} decodeFps
 * @property {string} encodeType
 * @property {string} audioCodec
 * @property {string} videoCodec
 * @property {string} domain
 * @property {number} fps
 * @property {number} bitrate
 * @property {number} width
 * @property {number} height
 * @property {number} samplerate
 * @property {number} channelCount
 * @property {number} gop
 */
export class MediaStatsService {
    constructor(core: any, timescale?: number);
    _core: any;
    _samples: any[];
    _timescale: number;
    _stats: Stats;
    /** @returns {StatsInfo} */
    getStats(): StatsInfo;
    _bindEvents(): void;
    reset(): void;
}
declare class Stats {
    constructor(timescale: any);
    encodeType: string;
    audioCodec: string;
    videoCodec: string;
    domain: string;
    fps: number;
    bitrate: number;
    width: number;
    height: number;
    samplerate: number;
    channelCount: number;
    gop: number;
    _bitsAccumulateSize: number;
    _bitsAccumulateDuration: number;
    _timescale: any;
    getStats(): {
        encodeType: string;
        audioCodec: string;
        videoCodec: string;
        domain: string;
        fps: number;
        bitrate: number;
        width: number;
        height: number;
        samplerate: number;
        channelCount: number;
        gop: number;
    };
    setEncodeType(encode: any): void;
    setFpsFromScriptData({ data }: {
        data: any;
    }): void;
    setVideoMeta(track: any): void;
    setAudioMeta(track: any): void;
    setDomain(responseUrl: any): void;
    updateBitrate(samples: any): void;
}
export {};
