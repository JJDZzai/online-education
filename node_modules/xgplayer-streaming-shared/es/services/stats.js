import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty, objectSpread2 as _objectSpread2 } from "../_virtual/_rollupPluginBabelHelpers.js";
import "../mse.js";
import { EVENT } from "../event.js";
import "eventemitter3";
import "../logger.js";
import "../error.js";
var Stats = /* @__PURE__ */ function() {
  function Stats2(timescale) {
    _classCallCheck(this, Stats2);
    _defineProperty(this, "encodeType", "");
    _defineProperty(this, "audioCodec", "");
    _defineProperty(this, "videoCodec", "");
    _defineProperty(this, "domain", "");
    _defineProperty(this, "fps", 0);
    _defineProperty(this, "bitrate", 0);
    _defineProperty(this, "width", 0);
    _defineProperty(this, "height", 0);
    _defineProperty(this, "samplerate", 0);
    _defineProperty(this, "channelCount", 0);
    _defineProperty(this, "gop", 0);
    _defineProperty(this, "_bitsAccumulateSize", 0);
    _defineProperty(this, "_bitsAccumulateDuration", 0);
    this._timescale = timescale;
  }
  _createClass(Stats2, [{
    key: "getStats",
    value: function getStats() {
      return {
        encodeType: this.encodeType,
        audioCodec: this.audioCodec,
        videoCodec: this.videoCodec,
        domain: this.domain,
        fps: this.fps,
        bitrate: this.bitrate,
        width: this.width,
        height: this.height,
        samplerate: this.samplerate,
        channelCount: this.channelCount,
        gop: this.gop
      };
    }
  }, {
    key: "setEncodeType",
    value: function setEncodeType(encode) {
      this.encodeType = encode;
    }
  }, {
    key: "setFpsFromScriptData",
    value: function setFpsFromScriptData(_ref) {
      var _data$onMetaData;
      var data = _ref.data;
      var fps = data === null || data === void 0 ? void 0 : (_data$onMetaData = data.onMetaData) === null || _data$onMetaData === void 0 ? void 0 : _data$onMetaData.framerate;
      if (fps && fps > 0 && fps < 100) {
        this.fps = fps;
      }
    }
  }, {
    key: "setVideoMeta",
    value: function setVideoMeta(track) {
      this.width = track.width;
      this.height = track.height;
      this.videoCodec = track.codec;
      this.encodeType = track.codecType;
      if (track.fpsNum && track.fpsDen) {
        var fps = track.fpsNum / track.fpsDen;
        if (fps > 0 && fps < 100) {
          this.fps = fps;
        }
      }
    }
  }, {
    key: "setAudioMeta",
    value: function setAudioMeta(track) {
      this.audioCodec = track.codec;
      this.samplerate = track.sampleRate;
      this.channelCount = track.channelCount;
    }
  }, {
    key: "setDomain",
    value: function setDomain(responseUrl) {
      this.domain = responseUrl.split("/").slice(2, 3)[0];
    }
  }, {
    key: "updateBitrate",
    value: function updateBitrate(samples) {
      var _this = this;
      if (!this.fps || this.fps >= 100) {
        if (samples.length) {
          var duration = samples.reduce(function(a, b) {
            return a += b.duration;
          }, 0) / samples.length;
          this.fps = Math.round(this._timescale / duration);
        }
      }
      samples.forEach(function(sample) {
        if (sample.gopId === 1) {
          _this.gop++;
        }
        _this._bitsAccumulateDuration += sample.duration / (_this._timescale / 1e3);
        _this._bitsAccumulateSize += sample.units.reduce(function(a, c) {
          return a += c.length;
        }, 0);
        if (_this._bitsAccumulateDuration >= 1e3) {
          _this.bitrate = _this._bitsAccumulateSize * 8;
          _this._bitsAccumulateDuration = 0;
          _this._bitsAccumulateSize = 0;
        }
      });
    }
  }]);
  return Stats2;
}();
var MediaStatsService = /* @__PURE__ */ function() {
  function MediaStatsService2(core) {
    var timescale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e3;
    _classCallCheck(this, MediaStatsService2);
    _defineProperty(this, "_core", null);
    _defineProperty(this, "_samples", []);
    this._core = core;
    this._timescale = timescale;
    this._stats = new Stats(timescale);
    this._bindEvents();
  }
  _createClass(MediaStatsService2, [{
    key: "getStats",
    value: function getStats() {
      var _this$_core, _this$_core2, _this$_core2$speedInf, _this$_core3, _this$_core3$speedInf, _this$_core4, _this$_core4$bufferIn;
      var _ref2 = ((_this$_core = this._core) === null || _this$_core === void 0 ? void 0 : _this$_core.media) || {}, _ref2$currentTime = _ref2.currentTime, currentTime = _ref2$currentTime === void 0 ? 0 : _ref2$currentTime, _ref2$decodeFps = _ref2.decodeFps, decodeFps = _ref2$decodeFps === void 0 ? 0 : _ref2$decodeFps;
      return _objectSpread2(_objectSpread2({}, this._stats.getStats()), {}, {
        downloadSpeed: ((_this$_core2 = this._core) === null || _this$_core2 === void 0 ? void 0 : (_this$_core2$speedInf = _this$_core2.speedInfo) === null || _this$_core2$speedInf === void 0 ? void 0 : _this$_core2$speedInf.call(_this$_core2).speed) || 0,
        avgSpeed: ((_this$_core3 = this._core) === null || _this$_core3 === void 0 ? void 0 : (_this$_core3$speedInf = _this$_core3.speedInfo) === null || _this$_core3$speedInf === void 0 ? void 0 : _this$_core3$speedInf.call(_this$_core3).avgSpeed) || 0,
        currentTime,
        bufferEnd: ((_this$_core4 = this._core) === null || _this$_core4 === void 0 ? void 0 : (_this$_core4$bufferIn = _this$_core4.bufferInfo()) === null || _this$_core4$bufferIn === void 0 ? void 0 : _this$_core4$bufferIn.remaining) || 0,
        decodeFps
      });
    }
  }, {
    key: "_bindEvents",
    value: function _bindEvents() {
      var _this2 = this;
      this._core.on(EVENT.DEMUXED_TRACK, function(_ref3) {
        var videoTrack = _ref3.videoTrack;
        return _this2._stats.updateBitrate(videoTrack.samples);
      });
      this._core.on(EVENT.FLV_SCRIPT_DATA, function(data) {
        _this2._stats.setFpsFromScriptData(data);
      });
      this._core.on(EVENT.METADATA_PARSED, function(e) {
        if (e.type === "video") {
          _this2._stats.setVideoMeta(e.track);
        } else {
          _this2._stats.setAudioMeta(e.track);
        }
      });
      this._core.on(EVENT.TTFB, function(e) {
        _this2._stats.setDomain(e.responseUrl);
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this._samples = [];
      this._stats = new Stats(this._timescale);
    }
  }]);
  return MediaStatsService2;
}();
export { MediaStatsService };
