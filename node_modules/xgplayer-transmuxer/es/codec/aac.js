import { defineProperty as _defineProperty, createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
import "../utils/logger.js";
import { isFirefox, isAndroid } from "../utils/env.js";
var AAC = /* @__PURE__ */ function() {
  function AAC2() {
    _classCallCheck(this, AAC2);
  }
  _createClass(AAC2, null, [{
    key: "getRateIndexByRate",
    value: function getRateIndexByRate(rate) {
      return AAC2.FREQ.indexOf(rate);
    }
  }, {
    key: "parseADTS",
    value: function parseADTS(data, pts) {
      var len = data.length;
      var i = 0;
      while (i + 2 < len) {
        if (data[i] === 255 && (data[i + 1] & 246) === 240) {
          break;
        }
        i++;
      }
      if (i >= len)
        return;
      var skip = i;
      var frames = [];
      var samplingFrequencyIndex = (data[i + 2] & 60) >>> 2;
      var sampleRate = AAC2.FREQ[samplingFrequencyIndex];
      if (!sampleRate)
        throw new Error("Invalid sampling index: ".concat(samplingFrequencyIndex));
      var objectType = ((data[i + 2] & 192) >>> 6) + 1;
      var channelCount = (data[i + 2] & 1) << 2 | (data[i + 3] & 192) >>> 6;
      var _AAC$_getConfig = AAC2._getConfig(samplingFrequencyIndex, channelCount, objectType), config = _AAC$_getConfig.config, codec = _AAC$_getConfig.codec;
      var protectionSkipBytes;
      var frameLength;
      var frameIndex = 0;
      var duration = AAC2.getFrameDuration(sampleRate);
      while (i + 7 < len) {
        if (data[i] !== 255 || (data[i + 1] & 246) !== 240) {
          i++;
          continue;
        }
        frameLength = (data[i + 3] & 3) << 11 | data[i + 4] << 3 | (data[i + 5] & 224) >> 5;
        if (len - i < frameLength)
          break;
        protectionSkipBytes = (~data[i + 1] & 1) * 2;
        frames.push({
          pts: pts + frameIndex * duration,
          data: data.subarray(i + 7 + protectionSkipBytes, i + frameLength)
        });
        frameIndex++;
        i += frameLength;
      }
      return {
        skip,
        remaining: i >= len ? void 0 : data.subarray(i),
        frames,
        samplingFrequencyIndex,
        sampleRate,
        objectType,
        channelCount,
        codec,
        config,
        originCodec: "mp4a.40.".concat(objectType)
      };
    }
  }, {
    key: "parseAudioSpecificConfig",
    value: function parseAudioSpecificConfig(data) {
      if (!data.length)
        return;
      var objectType = data[0] >>> 3;
      var samplingFrequencyIndex = (data[0] & 7) << 1 | data[1] >>> 7;
      var channelCount = (data[1] & 120) >>> 3;
      var sampleRate = AAC2.FREQ[samplingFrequencyIndex];
      if (!sampleRate)
        return;
      var _AAC$_getConfig2 = AAC2._getConfig(samplingFrequencyIndex, channelCount, objectType), config = _AAC$_getConfig2.config, codec = _AAC$_getConfig2.codec;
      return {
        samplingFrequencyIndex,
        sampleRate,
        objectType,
        channelCount,
        config,
        codec,
        originCodec: "mp4a.40.".concat(objectType)
      };
    }
  }, {
    key: "getFrameDuration",
    value: function getFrameDuration(rate) {
      var timescale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 9e4;
      return 1024 * timescale / rate;
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(samplingIndex, channelCount, originObjectType) {
      var config = [];
      var objectType;
      var extensionSamplingIndex;
      if (isFirefox) {
        if (samplingIndex >= 6) {
          objectType = 5;
          extensionSamplingIndex = samplingIndex - 3;
        } else {
          objectType = 2;
          extensionSamplingIndex = samplingIndex;
        }
      } else if (isAndroid) {
        objectType = 2;
        extensionSamplingIndex = samplingIndex;
      } else {
        objectType = originObjectType === 2 || originObjectType === 5 ? originObjectType : 5;
        extensionSamplingIndex = samplingIndex;
        if (samplingIndex >= 6) {
          extensionSamplingIndex = samplingIndex - 3;
        } else if (channelCount === 1) {
          objectType = 2;
          extensionSamplingIndex = samplingIndex;
        }
      }
      config[0] = objectType << 3;
      config[0] |= (samplingIndex & 14) >> 1;
      config[1] = (samplingIndex & 1) << 7;
      config[1] |= channelCount << 3;
      if (objectType === 5) {
        config[1] |= (extensionSamplingIndex & 14) >> 1;
        config[2] = (extensionSamplingIndex & 1) << 7;
        config[2] |= 2 << 2;
        config[3] = 0;
      }
      return {
        config,
        codec: "mp4a.40.".concat(objectType)
      };
    }
  }, {
    key: "getSilentFrame",
    value: function getSilentFrame(codec, channelCount) {
      switch (codec) {
        case "mp4a.40.2":
          if (channelCount === 1) {
            return new Uint8Array([0, 200, 0, 128, 35, 128]);
          }
          if (channelCount === 2) {
            return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
          }
          if (channelCount === 3) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
          }
          if (channelCount === 4) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
          }
          if (channelCount === 5) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
          }
          if (channelCount === 6) {
            return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
          }
          break;
        default:
          if (channelCount === 1) {
            return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          }
          if (channelCount === 2) {
            return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          }
          if (channelCount === 3) {
            return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
          }
          break;
      }
    }
  }]);
  return AAC2;
}();
_defineProperty(AAC, "FREQ", [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350]);
export { AAC };
