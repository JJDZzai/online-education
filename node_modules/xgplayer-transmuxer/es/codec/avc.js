import { createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
import { NALu } from "./nalu.js";
import { getAvcCodec } from "../utils/index.js";
import { ExpGolomb } from "../utils/exp-golomb.js";
var AVC = /* @__PURE__ */ function() {
  function AVC2() {
    _classCallCheck(this, AVC2);
  }
  _createClass(AVC2, null, [{
    key: "parseAVCDecoderConfigurationRecord",
    value: function parseAVCDecoderConfigurationRecord(data) {
      if (data.length < 7)
        return;
      var nalUnitSize = (data[4] & 3) + 1;
      var spsParsed;
      var spsArr = [];
      var ppsArr = [];
      var offset = 6;
      var spsCount = data[5] & 31;
      var spsSize;
      for (var i = 0; i < spsCount; i++) {
        spsSize = data[offset] << 8 | data[offset + 1];
        offset += 2;
        if (!spsSize)
          continue;
        var sps = data.subarray(offset, offset + spsSize);
        offset += spsSize;
        spsArr.push(sps);
        if (!spsParsed) {
          spsParsed = AVC2.parseSPS(NALu.removeEPB(sps));
        }
      }
      var ppsCount = data[offset];
      offset++;
      var ppsSize;
      for (var _i = 0; _i < ppsCount; _i++) {
        ppsSize = data[offset] << 8 | data[offset + 1];
        offset += 2;
        if (!ppsSize)
          continue;
        ppsArr.push(data.subarray(offset, offset + ppsSize));
        offset += ppsSize;
      }
      return {
        sps: spsParsed,
        spsArr,
        ppsArr,
        nalUnitSize
      };
    }
  }, {
    key: "parseSPS",
    value: function parseSPS(unit) {
      var eg = new ExpGolomb(unit);
      eg.readUByte();
      var profileIdc = eg.readUByte();
      var profileCompatibility = eg.readUByte();
      var levelIdc = eg.readUByte();
      eg.skipUEG();
      var chromaFormat = 420;
      if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128 || profileIdc === 138 || profileIdc === 144) {
        var chromaFormatIdc = eg.readUEG();
        if (chromaFormatIdc <= 3)
          chromaFormat = [0, 420, 422, 444][chromaFormatIdc];
        if (chromaFormatIdc === 3)
          eg.skipBits(1);
        eg.skipUEG();
        eg.skipUEG();
        eg.skipBits(1);
        if (eg.readBool()) {
          var scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
          for (var i = 0; i < scalingListCount; i++) {
            if (eg.readBool()) {
              if (i < 6) {
                eg.skipScalingList(16);
              } else {
                eg.skipScalingList(64);
              }
            }
          }
        }
      }
      eg.skipUEG();
      var picOrderCntType = eg.readUEG();
      if (picOrderCntType === 0) {
        eg.readUEG();
      } else if (picOrderCntType === 1) {
        eg.skipBits(1);
        eg.skipUEG();
        eg.skipUEG();
        var numRefFramesInPicOrderCntCycle = eg.readUEG();
        for (var _i2 = 0; _i2 < numRefFramesInPicOrderCntCycle; _i2++) {
          eg.skipUEG();
        }
      }
      eg.skipUEG();
      eg.skipBits(1);
      var picWidthInMbsMinus1 = eg.readUEG();
      var picHeightInMapUnitsMinus1 = eg.readUEG();
      var frameMbsOnlyFlag = eg.readBits(1);
      if (frameMbsOnlyFlag === 0)
        eg.skipBits(1);
      eg.skipBits(1);
      var frameCropLeftOffset = 0;
      var frameCropRightOffset = 0;
      var frameCropTopOffset = 0;
      var frameCropBottomOffset = 0;
      if (eg.readBool()) {
        frameCropLeftOffset = eg.readUEG();
        frameCropRightOffset = eg.readUEG();
        frameCropTopOffset = eg.readUEG();
        frameCropBottomOffset = eg.readUEG();
      }
      var sarRatio;
      var fixedFrame;
      var fpsNum;
      var fpsDen;
      var fps;
      if (eg.readBool()) {
        if (eg.readBool()) {
          var aspectRatioIdc = eg.readUByte();
          switch (aspectRatioIdc) {
            case 1:
              sarRatio = [1, 1];
              break;
            case 2:
              sarRatio = [12, 11];
              break;
            case 3:
              sarRatio = [10, 11];
              break;
            case 4:
              sarRatio = [16, 11];
              break;
            case 5:
              sarRatio = [40, 33];
              break;
            case 6:
              sarRatio = [24, 11];
              break;
            case 7:
              sarRatio = [20, 11];
              break;
            case 8:
              sarRatio = [32, 11];
              break;
            case 9:
              sarRatio = [80, 33];
              break;
            case 10:
              sarRatio = [18, 11];
              break;
            case 11:
              sarRatio = [15, 11];
              break;
            case 12:
              sarRatio = [64, 33];
              break;
            case 13:
              sarRatio = [160, 99];
              break;
            case 14:
              sarRatio = [4, 3];
              break;
            case 15:
              sarRatio = [3, 2];
              break;
            case 16:
              sarRatio = [2, 1];
              break;
            case 255: {
              sarRatio = [eg.readUByte() << 8 | eg.readUByte(), eg.readUByte() << 8 | eg.readUByte()];
              break;
            }
          }
        }
        if (eg.readBool())
          eg.readBool();
        if (eg.readBool()) {
          eg.readBits(4);
          if (eg.readBool())
            eg.readBits(24);
        }
        if (eg.readBool()) {
          eg.readUEG();
          eg.readUEG();
        }
        if (eg.readBool()) {
          var numUnitsInTick = eg.readBits(32);
          var timeScale = eg.readBits(32);
          fixedFrame = eg.readBool();
          fpsNum = timeScale;
          fpsDen = numUnitsInTick * 2;
          fps = fpsNum / fpsDen;
        }
      }
      return {
        codec: getAvcCodec(unit.subarray(1, 4)),
        profileIdc,
        profileCompatibility,
        levelIdc,
        chromaFormat,
        width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - 2 * (frameCropLeftOffset + frameCropRightOffset)),
        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
        sarRatio,
        fpsNum,
        fpsDen,
        fps,
        fixedFrame
      };
    }
  }]);
  return AVC2;
}();
export { AVC };
