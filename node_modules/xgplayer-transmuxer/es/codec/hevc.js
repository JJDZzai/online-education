import { createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
import { NALu } from "./nalu.js";
import { ExpGolomb } from "../utils/exp-golomb.js";
import "../utils/logger.js";
import "../utils/env.js";
var HEVC = /* @__PURE__ */ function() {
  function HEVC2() {
    _classCallCheck(this, HEVC2);
  }
  _createClass(HEVC2, null, [{
    key: "parseHEVCDecoderConfigurationRecord",
    value: function parseHEVCDecoderConfigurationRecord(data) {
      var hvcC = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (data.length < 23)
        return;
      hvcC = hvcC || {};
      var nalUnitSize = (data[21] & 3) + 1;
      var vpsParsed;
      var spsParsed;
      var spsArr = [];
      var ppsArr = [];
      var vpsArr = [];
      var offset = 23;
      var numOfArrays = data[22];
      var nalUnitType;
      var numNalus;
      var nalSize;
      for (var i = 0; i < numOfArrays; i++) {
        nalUnitType = data[offset] & 63;
        numNalus = data[offset + 1] << 8 | data[offset + 2];
        offset += 3;
        for (var j = 0; j < numNalus; j++) {
          nalSize = data[offset] << 8 | data[offset + 1];
          offset += 2;
          if (!nalSize)
            continue;
          switch (nalUnitType) {
            case 32:
              {
                var vps = data.subarray(offset, offset + nalSize);
                if (!vpsParsed)
                  vpsParsed = HEVC2.parseVPS(NALu.removeEPB(vps), hvcC);
                vpsArr.push(vps);
              }
              break;
            case 33:
              {
                var sps = data.subarray(offset, offset + nalSize);
                if (!spsParsed)
                  spsParsed = HEVC2.parseSPS(NALu.removeEPB(sps), hvcC);
                spsArr.push(sps);
              }
              break;
            case 34:
              ppsArr.push(data.subarray(offset, offset + nalSize));
              break;
          }
          offset += nalSize;
        }
      }
      return {
        hvcC,
        sps: spsParsed,
        spsArr,
        ppsArr,
        vpsArr,
        nalUnitSize
      };
    }
  }, {
    key: "parseVPS",
    value: function parseVPS(unit, hvcC) {
      hvcC = hvcC || {};
      var eg = new ExpGolomb(unit);
      eg.readUByte();
      eg.readUByte();
      eg.readBits(12);
      var vpsMaxSubLayersMinus1 = eg.readBits(3);
      hvcC.numTemporalLayers = Math.max(hvcC.numTemporalLayers || 0, vpsMaxSubLayersMinus1 + 1);
      eg.readBits(17);
      HEVC2._parseProfileTierLevel(eg, vpsMaxSubLayersMinus1, hvcC);
      return hvcC;
    }
  }, {
    key: "parseSPS",
    value: function parseSPS(unit) {
      var hvcC = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      hvcC = hvcC || {};
      var eg = new ExpGolomb(unit);
      eg.readUByte();
      eg.readUByte();
      eg.readBits(4);
      var spsMaxSubLayersMinus1 = eg.readBits(3);
      hvcC.numTemporalLayers = Math.max(spsMaxSubLayersMinus1 + 1, hvcC.numTemporalLayers || 0);
      hvcC.temporalIdNested = eg.readBits(1);
      HEVC2._parseProfileTierLevel(eg, spsMaxSubLayersMinus1, hvcC);
      eg.readUEG();
      var chromaFormatIdc = hvcC.chromaFormatIdc = eg.readUEG();
      var chromaFormat = 420;
      if (chromaFormatIdc <= 3)
        chromaFormat = [0, 420, 422, 444][chromaFormatIdc];
      var separateColourPlaneFlag = 0;
      if (chromaFormatIdc === 3) {
        separateColourPlaneFlag = eg.readBits(1);
      }
      var width = eg.readUEG();
      var height = eg.readUEG();
      var conformanceWindowFlag = eg.readBits(1);
      var confWinLeftOffset;
      var confWinRightOffset;
      var confWinTopOffset;
      var confWinBottomOffset;
      if (conformanceWindowFlag === 1) {
        confWinLeftOffset = eg.readUEG();
        confWinRightOffset = eg.readUEG();
        confWinTopOffset = eg.readUEG();
        confWinBottomOffset = eg.readUEG();
      }
      hvcC.bitDepthLumaMinus8 = eg.readUEG();
      hvcC.bitDepthChromaMinus8 = eg.readUEG();
      if (conformanceWindowFlag === 1) {
        var subWidthC = (chromaFormatIdc === 1 || chromaFormatIdc === 2) && separateColourPlaneFlag === 0 ? 2 : 1;
        var subHeightC = chromaFormatIdc === 1 && separateColourPlaneFlag === 0 ? 2 : 1;
        width -= subWidthC * (confWinRightOffset + confWinLeftOffset);
        height -= subHeightC * (confWinBottomOffset + confWinTopOffset);
      }
      return {
        codec: "hev1.1.6.L93.B0",
        width,
        height,
        chromaFormat,
        hvcC
      };
    }
  }, {
    key: "_parseProfileTierLevel",
    value: function _parseProfileTierLevel(eg, maxSubLayersMinus1, hvcC) {
      var generalTierFlag = hvcC.generalTierFlag || 0;
      hvcC.generalProfileSpace = eg.readBits(2);
      hvcC.generalTierFlag = Math.max(eg.readBits(1), generalTierFlag);
      hvcC.generalProfileIdc = Math.max(eg.readBits(5), hvcC.generalProfileIdc || 0);
      hvcC.generalProfileCompatibilityFlags = eg.readBits(32);
      hvcC.generalConstraintIndicatorFlags = [eg.readBits(8), eg.readBits(8), eg.readBits(8), eg.readBits(8), eg.readBits(8), eg.readBits(8)];
      var generalLevelIdc = eg.readBits(8);
      if (generalTierFlag < hvcC.generalTierFlag) {
        hvcC.generalLevelIdc = generalLevelIdc;
      } else {
        hvcC.generalLevelIdc = Math.max(generalLevelIdc, hvcC.generalLevelIdc || 0);
      }
      var subLayerProfilePresentFlag = [];
      var subLayerLevelPresentFlag = [];
      for (var j = 0; j < maxSubLayersMinus1; j++) {
        subLayerProfilePresentFlag[j] = eg.readBits(1);
        subLayerLevelPresentFlag[j] = eg.readBits(1);
      }
      if (maxSubLayersMinus1 > 0) {
        eg.readBits((8 - maxSubLayersMinus1) * 2);
      }
      for (var i = 0; i < maxSubLayersMinus1; i++) {
        if (subLayerProfilePresentFlag[i] !== 0) {
          eg.readBits(2);
          eg.readBits(1);
          eg.readBits(5);
          eg.readBits(16);
          eg.readBits(16);
          eg.readBits(4);
          eg.readBits(16);
          eg.readBits(16);
          eg.readBits(12);
        }
        if (subLayerLevelPresentFlag[i] !== 0) {
          eg.readBits(8);
        }
      }
    }
  }]);
  return HEVC2;
}();
export { HEVC };
