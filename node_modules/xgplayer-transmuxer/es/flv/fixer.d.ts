export class FlvFixer {
    constructor(videoTrack: any, audioTrack: any, metadataTrack: any);
    videoTrack: any;
    audioTrack: any;
    metadataTrack: any;
    _baseDts: number;
    _baseDtsInited: boolean;
    _audioNextPts: any;
    _videoNextDts: any;
    _audioTimestampBreak: number;
    _videoTimestampBreak: number;
    _lastVideoDuration: number;
    _keyFrameInNextChunk: boolean;
    _lastAudioExceptionGapDot: number;
    _lastAudioExceptionOverlapDot: number;
    _lastAudioExceptionLargeGapDot: number;
    _lastVideoExceptionLargeGapDot: number;
    _lastVideoExceptionChunkFirstDtsDot: number;
    /**
     * @param {number} startTime 点播seek到的时间点
     * @param {boolean} discontinuity 是否换流
     * @param {boolean} contiguous 前后chunk时间戳是否连续
     */
    fix(startTime?: number, discontinuity?: boolean, contiguous?: boolean): void;
    _videoLastSample: any;
    _fixVideo(videoTrack: any): void;
    _fixAudio(audioTrack: any): void;
    _calculateBaseDts(audioTrack: any, videoTrack: any): boolean;
    _resetBaseDtsWhenStreamBreaked(): void;
    _doFixAudioInternal(audioTrack: any, samples: any, timescale: any): void;
    _getG711Duration(track: any): number;
    _getSilentFrame(track: any): Uint8Array;
}
