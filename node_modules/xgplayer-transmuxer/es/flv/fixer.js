import { createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
import { WarningType, AudioCodecType } from "../model/types.js";
import { AudioSample } from "../model/audio-sample.js";
import "../utils/logger.js";
import { isSafari } from "../utils/env.js";
import { AAC } from "../codec/aac.js";
var LARGE_AV_FIRST_FRAME_GAP = 500;
var AUDIO_GAP_OVERLAP_THRESHOLD_COUNT = 3;
var MAX_SILENT_FRAME_DURATION = 1e3;
var AUDIO_EXCETION_LOG_EMIT_DURATION = 5e3;
var MAX_VIDEO_FRAME_DURATION = 1e3;
var MAX_DTS_DELTA_WITH_NEXT_CHUNK = 200;
var VIDEO_EXCETION_LOG_EMIT_DURATION = 5e3;
var TRACK_BREACKED_CHECK_TIME = 5;
var FlvFixer = /* @__PURE__ */ function() {
  function FlvFixer2(videoTrack, audioTrack, metadataTrack) {
    _classCallCheck(this, FlvFixer2);
    this.videoTrack = videoTrack;
    this.audioTrack = audioTrack;
    this.metadataTrack = metadataTrack;
    this._baseDts = -1;
    this._baseDtsInited = false;
    this._audioNextPts = void 0;
    this._videoNextDts = void 0;
    this._audioTimestampBreak = 0;
    this._videoTimestampBreak = 0;
    this._lastVideoDuration = 0;
    this._keyFrameInNextChunk = false;
    this._lastAudioExceptionGapDot = -Infinity;
    this._lastAudioExceptionOverlapDot = -Infinity;
    this._lastAudioExceptionLargeGapDot = -Infinity;
    this._lastVideoExceptionLargeGapDot = -Infinity;
    this._lastVideoExceptionChunkFirstDtsDot = -Infinity;
  }
  _createClass(FlvFixer2, [{
    key: "fix",
    value: function fix() {
      var _this = this;
      var startTime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var discontinuity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var contiguous = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      startTime = Math.round(startTime * 1e3);
      var videoTrack = this.videoTrack;
      var audioTrack = this.audioTrack;
      if (discontinuity || !contiguous) {
        this._videoLastSample = null;
        this._audioNextPts = void 0;
        this._videoNextDts = void 0;
        this._audioTimestampBreak = 0;
        this._videoTimestampBreak = 0;
        this._lastAudioExceptionGapDot = -Infinity;
        this._lastAudioExceptionOverlapDot = -Infinity;
        this._lastAudioExceptionLargeGapDot = -Infinity;
        this._lastVideoExceptionLargeGapDot = -Infinity;
        this._lastVideoExceptionChunkFirstDtsDot = -Infinity;
      }
      if (discontinuity && !contiguous) {
        this._baseDtsInited = false;
      }
      if (!this._baseDtsInited) {
        this._calculateBaseDts(audioTrack, videoTrack);
      }
      if (!contiguous && startTime) {
        this._audioNextPts = this._videoNextDts = startTime;
      }
      var resetBaseDts = this._baseDtsInited && (this._videoTimestampBreak || !this.videoTrack.exist()) && (this._audioTimestampBreak || !this.audioTrack.exist());
      if (resetBaseDts) {
        this._resetBaseDtsWhenStreamBreaked();
      }
      this._fixAudio(audioTrack);
      this._keyFrameInNextChunk = false;
      this._fixVideo(videoTrack);
      if (this.metadataTrack.exist()) {
        var timescale = this.metadataTrack.timescale;
        this.metadataTrack.seiSamples.forEach(function(s) {
          s.pts = s.originPts - _this._baseDts;
          s.time = Math.max(0, s.pts) / timescale;
        });
        this.metadataTrack.flvScriptSamples.forEach(function(s) {
          s.pts = s.originPts - _this._baseDts;
          s.time = Math.max(0, s.pts) / timescale;
        });
      }
      if (videoTrack.samples.length) {
        videoTrack.baseMediaDecodeTime = videoTrack.samples[0].dts;
      }
      if (audioTrack.samples.length) {
        audioTrack.baseMediaDecodeTime = audioTrack.samples[0].pts * audioTrack.timescale / 1e3;
      }
    }
  }, {
    key: "_fixVideo",
    value: function _fixVideo(videoTrack) {
      var _this2 = this;
      var samples = videoTrack.samples;
      if (!samples.length)
        return;
      samples.forEach(function(x) {
        x.dts -= _this2._baseDts;
        x.pts -= _this2._baseDts;
        if (x.keyframe)
          _this2._keyFrameInNextChunk = true;
      });
      var refSampleDurationInt;
      if (videoTrack.fpsNum && videoTrack.fpsDen) {
        refSampleDurationInt = videoTrack.timescale * (videoTrack.fpsDen / videoTrack.fpsNum);
      } else if (videoTrack.length > 1) {
        var first = videoTrack.samples[0];
        var last = videoTrack.samples[samples.length - 1];
        refSampleDurationInt = Math.floor((last.dts - first.dts) / (samples.length - 1));
      } else {
        refSampleDurationInt = this._lastVideoDuration || 40;
      }
      var lastSample = samples.pop();
      if (this._videoLastSample) {
        samples.unshift(this._videoLastSample);
      }
      this._videoLastSample = lastSample;
      if (!samples.length)
        return;
      if (this._videoNextDts === void 0) {
        var samp0 = samples[0];
        this._videoNextDts = samp0.dts;
      }
      var len = samples.length;
      var sampleDuration = 0;
      var firstSample = samples[0];
      var vDelta = this._videoNextDts - firstSample.dts;
      if (Math.abs(vDelta) > MAX_DTS_DELTA_WITH_NEXT_CHUNK) {
        if (Math.abs(firstSample.dts - this._lastVideoExceptionChunkFirstDtsDot) > VIDEO_EXCETION_LOG_EMIT_DURATION) {
          var _samples$;
          this._lastVideoExceptionChunkFirstDtsDot = firstSample.dts;
          videoTrack.warnings.push({
            type: WarningType.LARGE_VIDEO_GAP_BETWEEN_CHUNK,
            nextDts: this._videoNextDts,
            firstSampleDts: firstSample.dts,
            nextSampleDts: (_samples$ = samples[1]) === null || _samples$ === void 0 ? void 0 : _samples$.dts,
            sampleDuration: vDelta
          });
        }
        if (this._videoTimestampBreak >= TRACK_BREACKED_CHECK_TIME) {
          this._videoNextDts = firstSample.dts;
          this._videoTimestampBreak = 0;
        } else {
          firstSample.dts += vDelta;
          firstSample.pts += vDelta;
          if (!this.audioTrack.exist()) {
            this._videoTimestampBreak = 1;
          }
        }
      }
      for (var i = 0; i < len; i++) {
        var dts = samples[i].dts;
        var nextSample = samples[i + 1];
        if (i < len - 1) {
          sampleDuration = nextSample.dts - dts;
        } else if (lastSample) {
          sampleDuration = lastSample.dts - dts;
        } else {
          sampleDuration = refSampleDurationInt;
        }
        if (sampleDuration > MAX_VIDEO_FRAME_DURATION || sampleDuration < 0) {
          this._videoTimestampBreak++;
          if (Math.abs(dts - this._lastVideoExceptionLargeGapDot) > VIDEO_EXCETION_LOG_EMIT_DURATION) {
            this._lastVideoExceptionLargeGapDot = dts;
            videoTrack.warnings.push({
              type: WarningType.LARGE_VIDEO_GAP,
              time: dts / videoTrack.timescale,
              dts,
              originDts: samples[i].originDts,
              nextDts: this._videoNextDts,
              sampleDuration,
              refSampleDuration: refSampleDurationInt
            });
          }
          sampleDuration = refSampleDurationInt;
        }
        samples[i].duration = sampleDuration;
        this._videoNextDts += sampleDuration;
        this._lastVideoDuration = sampleDuration;
      }
    }
  }, {
    key: "_fixAudio",
    value: function _fixAudio(audioTrack) {
      var _this3 = this;
      var samples = audioTrack.samples;
      if (!samples.length)
        return;
      samples.forEach(function(x) {
        x.dts = x.pts -= _this3._baseDts;
      });
      this._doFixAudioInternal(audioTrack, samples, 1e3);
    }
  }, {
    key: "_calculateBaseDts",
    value: function _calculateBaseDts(audioTrack, videoTrack) {
      var audioSamps = audioTrack.samples;
      var videoSamps = videoTrack.samples;
      if (!audioSamps.length && !videoSamps.length) {
        return false;
      }
      var audioBasePts = Infinity;
      var videoBaseDts = Infinity;
      if (audioSamps.length) {
        audioTrack.baseDts = audioBasePts = audioSamps[0].pts;
      }
      if (videoSamps.length) {
        videoTrack.baseDts = videoBaseDts = videoSamps[0].dts;
      }
      this._baseDts = Math.min(audioBasePts, videoBaseDts);
      var delta = videoBaseDts - audioBasePts;
      if (Number.isFinite(delta) && Math.abs(delta) > LARGE_AV_FIRST_FRAME_GAP) {
        videoTrack.warnings.push({
          type: WarningType.LARGE_AV_SHIFT,
          videoBaseDts,
          audioBasePts,
          baseDts: this._baseDts,
          delta
        });
      }
      this._baseDtsInited = true;
      return true;
    }
  }, {
    key: "_resetBaseDtsWhenStreamBreaked",
    value: function _resetBaseDtsWhenStreamBreaked() {
      var calc = this._calculateBaseDts(this.audioTrack, this.videoTrack);
      if (!calc)
        return;
      if (!this.audioTrack.exist()) {
        this._baseDts -= this._videoNextDts;
      } else if (!this.videoTrack.exist()) {
        this._baseDts -= this._audioNextPts;
      } else {
        this._baseDts -= Math.min(this._audioNextPts, this._videoNextDts);
      }
      this._videoTimestampBreak = 0;
      this._audioTimestampBreak = 0;
    }
  }, {
    key: "_doFixAudioInternal",
    value: function _doFixAudioInternal(audioTrack, samples, timescale) {
      if (!audioTrack.sampleDuration) {
        audioTrack.sampleDuration = audioTrack.codecType === AudioCodecType.AAC ? AAC.getFrameDuration(audioTrack.timescale, timescale) : this._getG711Duration(audioTrack);
      }
      var refSampleDuration = audioTrack.sampleDuration;
      var sampleDurationInSampleRate = audioTrack.codecType === AudioCodecType.AAC ? 1024 : refSampleDuration * audioTrack.timescale / 1e3;
      if (this._audioNextPts === void 0) {
        var samp0 = samples[0];
        this._audioNextPts = samp0.pts;
      }
      for (var i = 0; i < samples.length; i++) {
        var nextPts = this._audioNextPts;
        var sample = samples[i];
        var delta = sample.pts - nextPts;
        if (i === 0 && this._audioTimestampBreak >= TRACK_BREACKED_CHECK_TIME && this._keyFrameInNextChunk) {
          nextPts = this._audioNextPts = sample.dts;
          delta = 0;
          this._audioTimestampBreak = 0;
        }
        if (!this._audioTimestampBreak && delta >= AUDIO_GAP_OVERLAP_THRESHOLD_COUNT * refSampleDuration && delta <= MAX_SILENT_FRAME_DURATION && !isSafari) {
          var silentFrame = this._getSilentFrame(audioTrack) || samples[0].data.subarray();
          var count = Math.floor(delta / refSampleDuration);
          if (Math.abs(sample.pts - this._lastAudioExceptionGapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
            this._lastAudioExceptionGapDot = sample.pts;
            audioTrack.warnings.push({
              type: WarningType.AUDIO_FILLED,
              pts: sample.pts,
              originPts: sample.originPts,
              count,
              nextPts,
              refSampleDuration
            });
          }
          for (var j = 0; j < count; j++) {
            var silentSample = new AudioSample(Math.floor(this._audioNextPts + refSampleDuration) - Math.floor(this._audioNextPts), silentFrame, sampleDurationInSampleRate);
            silentSample.originPts = Math.floor(this._baseDts + nextPts);
            samples.splice(i, 0, silentSample);
            this._audioNextPts += refSampleDuration;
            i++;
          }
          i--;
        } else if (delta <= -AUDIO_GAP_OVERLAP_THRESHOLD_COUNT * refSampleDuration && delta >= -1 * MAX_SILENT_FRAME_DURATION) {
          if (Math.abs(sample.pts - this._lastAudioExceptionOverlapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
            this._lastAudioExceptionOverlapDot = sample.pts;
            audioTrack.warnings.push({
              type: WarningType.AUDIO_DROPPED,
              pts: sample.pts,
              originPts: sample.originPts,
              nextPts,
              refSampleDuration
            });
          }
          samples.splice(i, 1);
          i--;
        } else {
          if (Math.abs(delta) > MAX_SILENT_FRAME_DURATION) {
            this._audioTimestampBreak++;
            if (Math.abs(sample.pts - this._lastAudioExceptionLargeGapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
              this._lastAudioExceptionLargeGapDot = sample.pts;
              audioTrack.warnings.push({
                type: WarningType.LARGE_AUDIO_GAP,
                time: sample.pts / 1e3,
                pts: sample.pts,
                originPts: sample.originPts,
                nextPts,
                sampleDuration: delta,
                refSampleDuration
              });
            }
          }
          sample.dts = sample.pts = nextPts;
          sample.duration = sampleDurationInSampleRate;
          this._audioNextPts += refSampleDuration;
        }
      }
    }
  }, {
    key: "_getG711Duration",
    value: function _getG711Duration(track) {
      var sampleSize = track.sampleSize, channelCount = track.channelCount, sampleRate = track.sampleRate;
      var samp0 = track.samples[0];
      if (!samp0)
        return;
      return samp0.data.byteLength * 2 / channelCount / (sampleSize / 8) / sampleRate * 1e3;
    }
  }, {
    key: "_getSilentFrame",
    value: function _getSilentFrame(track) {
      if (track.codecType === AudioCodecType.AAC)
        return AAC.getSilentFrame(track.codec, track.channelCount);
      return new Uint8Array(8 * track.sampleDuration * track.channelCount);
    }
  }]);
  return FlvFixer2;
}();
export { FlvFixer };
