declare var _default: {
    Logger: typeof Logger;
    VideoTrack: typeof model.VideoTrack;
    AudioTrack: typeof model.AudioTrack;
    VideoSample: typeof model.VideoSample;
    AudioSample: typeof model.AudioSample;
    FlvScriptSample: typeof model.FlvScriptSample;
    SeiSample: typeof model.SeiSample;
    MetadataTrack: typeof model.MetadataTrack;
    TrackType: {
        VIDEO: string;
        AUDIO: string;
        METADATA: string;
    };
    VideoCodecType: {
        AVC: string;
        HEVC: string;
    };
    AudioCodecType: {
        AAC: string;
        G711PCMA: string;
        G711PCMU: string;
    };
    WarningType: {
        LARGE_AV_SHIFT: string;
        LARGE_VIDEO_GAP: string;
        LARGE_VIDEO_GAP_BETWEEN_CHUNK: string;
        LARGE_AUDIO_GAP: string;
        AUDIO_FILLED: string;
        AUDIO_DROPPED: string;
    };
    FMP4Demuxer: typeof mp4.FMP4Demuxer;
    FMP4Remuxer: typeof mp4.FMP4Remuxer;
    MP4Demuxer: typeof mp4.MP4Demuxer;
    MP4Remuxer: typeof mp4.MP4Remuxer;
    MP4Parser: typeof mp4.MP4Parser;
    Crypto: {
        decryptWordArray: (raw: any, key: any, iv: any) => Uint8Array;
        wordArrayToUint8Array: (wordArray: any) => Uint8Array;
        decoderAESCTRData(videoTrack: any, audioTrack: any, customDescryptHandler: any): void;
    };
    TsDemuxer: typeof mpegTs.TsDemuxer;
    FlvDemuxer: typeof flv.FlvDemuxer;
};
export default _default;
import { Logger } from "./utils";
import * as model from "./model";
import * as mp4 from "./mp4";
import * as mpegTs from "./mpeg-ts";
import * as flv from "./flv";
