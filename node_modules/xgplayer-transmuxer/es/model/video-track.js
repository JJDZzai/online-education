import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty } from "../_virtual/_rollupPluginBabelHelpers.js";
import { TrackType, VideoCodecType } from "./types.js";
var VideoTrack = /* @__PURE__ */ function() {
  function VideoTrack2() {
    _classCallCheck(this, VideoTrack2);
    _defineProperty(this, "id", 1);
    _defineProperty(this, "type", TrackType.VIDEO);
    _defineProperty(this, "codecType", VideoCodecType.AVC);
    _defineProperty(this, "pid", -1);
    _defineProperty(this, "hvcC", void 0);
    _defineProperty(this, "codec", "");
    _defineProperty(this, "timescale", 0);
    _defineProperty(this, "formatTimescale", 0);
    _defineProperty(this, "sequenceNumber", 0);
    _defineProperty(this, "baseMediaDecodeTime", 0);
    _defineProperty(this, "baseDts", 0);
    _defineProperty(this, "duration", 0);
    _defineProperty(this, "warnings", []);
    _defineProperty(this, "samples", []);
    _defineProperty(this, "pps", []);
    _defineProperty(this, "sps", []);
    _defineProperty(this, "vps", []);
    _defineProperty(this, "fpsNum", 0);
    _defineProperty(this, "fpsDen", 0);
    _defineProperty(this, "sarRatio", []);
    _defineProperty(this, "width", 0);
    _defineProperty(this, "height", 0);
    _defineProperty(this, "nalUnitSize", 4);
    _defineProperty(this, "present", false);
    _defineProperty(this, "isVideoEncryption", false);
    _defineProperty(this, "isAudioEncryption", false);
    _defineProperty(this, "isVideo", true);
    _defineProperty(this, "kid", null);
    _defineProperty(this, "pssh", null);
    _defineProperty(this, "ext", void 0);
  }
  _createClass(VideoTrack2, [{
    key: "reset",
    value: function reset() {
      this.sequenceNumber = this.width = this.height = this.fpsDen = this.fpsNum = this.duration = this.baseMediaDecodeTime = this.timescale = 0;
      this.codec = "";
      this.present = false;
      this.pid = -1;
      this.pps = [];
      this.sps = [];
      this.vps = [];
      this.sarRatio = [];
      this.samples = [];
      this.warnings = [];
      this.hvcC = null;
    }
  }, {
    key: "exist",
    value: function exist() {
      return !!(this.pps.length && this.sps.length && this.codec);
    }
  }, {
    key: "hasSample",
    value: function hasSample() {
      return !!this.samples.length;
    }
  }, {
    key: "isEncryption",
    get: function get() {
      return this.isVideoEncryption;
    }
  }]);
  return VideoTrack2;
}();
export { VideoTrack };
