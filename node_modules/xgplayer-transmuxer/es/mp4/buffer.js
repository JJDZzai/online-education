import { createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
function Concat(ResultConstructor) {
  var totalLength = 0;
  for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    arrays[_key - 1] = arguments[_key];
  }
  arrays.forEach(function(arr) {
    totalLength += arr.length;
  });
  var result = new ResultConstructor(totalLength);
  var offset = 0;
  arrays.forEach(function(arr) {
    result.set(arr, offset);
    offset += arr.length;
  });
  return result;
}
var Buffer = /* @__PURE__ */ function() {
  function Buffer2() {
    _classCallCheck(this, Buffer2);
    this.buffer = new Uint8Array(0);
  }
  _createClass(Buffer2, [{
    key: "write",
    value: function write() {
      var self = this;
      for (var _len2 = arguments.length, buffer = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        buffer[_key2] = arguments[_key2];
      }
      buffer.forEach(function(item) {
        if (item) {
          self.buffer = Concat(Uint8Array, self.buffer, item);
        } else {
          window.console.warn(item);
        }
      });
    }
  }], [{
    key: "writeUint16",
    value: function writeUint16(value) {
      return new Uint8Array([value >> 8 & 255, value & 255]);
    }
  }, {
    key: "writeUint32",
    value: function writeUint32(value) {
      return new Uint8Array([value >> 24, value >> 16 & 255, value >> 8 & 255, value & 255]);
    }
  }]);
  return Buffer2;
}();
export { Buffer as default };
