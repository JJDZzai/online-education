export class MP4Parser {
    static findBox(data: any, names: any, start?: number): any;
    static tfhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static sidx(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static moov(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static mvhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static trak(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static tkhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static mdia(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static mdhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static hdlr(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static minf(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static vmhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static smhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stbl(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static senc(box: any, iv?: number): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static pssh(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stsd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static tenc(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static schi(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static sinf(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static frma(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static avc1(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static avcC(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static hvc1(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static hvcC(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static pasp(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static mp4a(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static esds(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static alaw(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stts(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static ctts(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stsc(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stsz(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stco(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static co64(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static stss(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static moof(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static mfhd(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static traf(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static trun(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static tfdt(box: any): {
        start: any;
        size: any;
        headerSize: any;
        type: any;
    };
    static probe(data: any): boolean;
    static parseSampleFlags(flags: any): {
        isLeading: number;
        dependsOn: number;
        isDependedOn: number;
        hasRedundancy: number;
        paddingValue: number;
        isNonSyncSample: number;
        degradationPriority: number;
    };
    static moovToTrack(moov: any, videoTrack: any, audioTrack: any): {
        videoTrack: any;
        audioTrack: any;
    };
    static evaluateDefaultDuration(videoTrack: any, audioTrack: any, videoSampleCount: any): number;
    static moofToSamples(moof: any, videoTrack: any, audioTrack: any): {};
    static moovToSamples(moov: any): {
        videoSamples: any[];
        audioSamples: any[];
    };
}
