import { defineProperty as _defineProperty, createClass as _createClass, classCallCheck as _classCallCheck, toConsumableArray as _toConsumableArray, slicedToArray as _slicedToArray } from "../_virtual/_rollupPluginBabelHelpers.js";
import { TrackType, VideoCodecType } from "../model/types.js";
import { concatUint8Array, parse } from "../utils/index.js";
import Buffer from "./buffer.js";
var UINT32_MAX = Math.pow(2, 32) - 1;
var MP4 = /* @__PURE__ */ function() {
  function MP42() {
    _classCallCheck(this, MP42);
  }
  _createClass(MP42, null, [{
    key: "box",
    value: function box(type) {
      for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        payload[_key - 1] = arguments[_key];
      }
      payload = payload.filter(Boolean);
      var size = 8 + payload.reduce(function(p, c) {
        return p + c.byteLength;
      }, 0);
      var ret = new Uint8Array(size);
      ret[0] = size >> 24 & 255;
      ret[1] = size >> 16 & 255;
      ret[2] = size >> 8 & 255;
      ret[3] = size & 255;
      ret.set(type, 4);
      var offset = 8;
      payload.forEach(function(data) {
        ret.set(data, offset);
        offset += data.byteLength;
      });
      return ret;
    }
  }, {
    key: "ftyp",
    value: function ftyp(tracks) {
      var isHevc = tracks.find(function(t) {
        return t.type === TrackType.VIDEO && t.codecType === VideoCodecType.HEVC;
      });
      return isHevc ? MP42.FTYPHEV1 : MP42.FTYPAVC1;
    }
  }, {
    key: "initSegment",
    value: function initSegment(tracks) {
      var ftyp = MP42.ftyp(tracks);
      var init = concatUint8Array(ftyp, MP42.moov(tracks));
      return init;
    }
  }, {
    key: "pssh",
    value: function pssh(data) {
      var content = new Uint8Array([
        1,
        0,
        0,
        0
      ].concat([16, 119, 239, 236, 192, 178, 77, 2, 172, 227, 60, 30, 82, 226, 251, 75], [0, 0, 0, 1], parse(data.kid), [0, 0, 0, 0]));
      return MP42.box(MP42.types.pssh, content);
    }
  }, {
    key: "moov",
    value: function moov(tracks) {
      if (tracks[0].useEME && (tracks[0].encv || tracks[0].enca)) {
        if (!tracks[0].pssh) {
          tracks[0].pssh = {
            kid: tracks[0].kid
          };
        }
        var pssh = this.pssh(tracks[0].pssh);
        return MP42.box.apply(MP42, [MP42.types.moov, MP42.mvhd(tracks[0].mvhdDurtion || tracks[0].duration, tracks[0].mvhdTimecale || tracks[0].timescale), MP42.mvex(tracks)].concat(_toConsumableArray(tracks.map(function(t) {
          return MP42.trak(t);
        })), [pssh]));
      } else {
        return MP42.box.apply(MP42, [MP42.types.moov, MP42.mvhd(tracks[0].mvhdDurtion || tracks[0].duration, tracks[0].mvhdTimecale || tracks[0].timescale)].concat(_toConsumableArray(tracks.map(function(t) {
          return MP42.trak(t);
        })), [MP42.mvex(tracks)]));
      }
    }
  }, {
    key: "mvhd",
    value: function mvhd(duration) {
      var timescale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 9e4;
      var mvhd2 = MP42.box(MP42.types.mvhd, new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        timescale >> 24 & 255,
        timescale >> 16 & 255,
        timescale >> 8 & 255,
        timescale & 255,
        duration >> 24 & 255,
        duration >> 16 & 255,
        duration >> 8 & 255,
        duration & 255,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        255,
        255,
        255,
        255
      ]));
      return mvhd2;
    }
  }, {
    key: "trak",
    value: function trak(track) {
      var trak2 = MP42.box(MP42.types.trak, MP42.tkhd(track.id, track.tkhdDuration || 0, track.width, track.height), MP42.mdia(track));
      return trak2;
    }
  }, {
    key: "tkhd",
    value: function tkhd(id, duration) {
      var width = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var height = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var tkhd2 = MP42.box(MP42.types.tkhd, new Uint8Array([
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        id >> 24 & 255,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        0,
        0,
        0,
        0,
        duration >> 24 & 255,
        duration >> 16 & 255,
        duration >> 8 & 255,
        duration & 255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        width >> 8 & 255,
        width & 255,
        0,
        0,
        height >> 8 & 255,
        height & 255,
        0,
        0
      ]));
      return tkhd2;
    }
  }, {
    key: "mdia",
    value: function mdia(track) {
      var mdia2 = MP42.box(MP42.types.mdia, MP42.mdhd(track.duration, track.timescale), MP42.hdlr(track.type), MP42.minf(track));
      return mdia2;
    }
  }, {
    key: "mdhd",
    value: function mdhd(duration) {
      var timescale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 9e4;
      var mdhd2 = MP42.box(MP42.types.mdhd, new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        timescale >> 24 & 255,
        timescale >> 16 & 255,
        timescale >> 8 & 255,
        timescale & 255,
        duration >> 24 & 255,
        duration >> 16 & 255,
        duration >> 8 & 255,
        duration & 255,
        85,
        196,
        0,
        0
      ]));
      return mdhd2;
    }
  }, {
    key: "hdlr",
    value: function hdlr(type) {
      var hdlr2 = MP42.box(MP42.types.hdlr, MP42.HDLR_TYPES[type]);
      return hdlr2;
    }
  }, {
    key: "minf",
    value: function minf(track) {
      var minf2 = MP42.box(MP42.types.minf, track.type === TrackType.VIDEO ? MP42.VMHD : MP42.SMHD, MP42.DINF, MP42.stbl(track));
      return minf2;
    }
  }, {
    key: "stbl",
    value: function stbl(track) {
      var extBox = [];
      if (track && track.ext) {
        track.ext.stss && extBox.push(MP42.stss(track.ext.stss.entries));
      }
      var stbl2 = MP42.box(MP42.types.stbl, MP42.stsd(track), MP42.STTS, extBox[0], MP42.STSC, MP42.STSZ, MP42.STCO);
      return stbl2;
    }
  }, {
    key: "stsd",
    value: function stsd(track) {
      var content;
      if (track.type === "audio") {
        if (track.useEME && track.enca) {
          content = MP42.enca(track);
        } else {
          content = MP42.mp4a(track);
        }
      } else if (track.useEME && track.encv) {
        content = MP42.encv(track);
      } else {
        content = MP42.avc1hev1(track);
      }
      var stsd2 = MP42.box(MP42.types.stsd, new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]), content);
      return stsd2;
    }
  }, {
    key: "enca",
    value: function enca(data) {
      var channelCount = data.enca.channelCount;
      var sampleRate = data.enca.sampleRate;
      var content = new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        channelCount,
        0,
        16,
        0,
        0,
        0,
        0,
        sampleRate >> 8 & 255,
        sampleRate & 255,
        0,
        0
      ]);
      var esds = MP42.esds(data.config);
      var sinf = MP42.sinf(data.enca);
      return MP42.box(MP42.types.enca, content, esds, sinf);
    }
  }, {
    key: "encv",
    value: function encv(track) {
      var _concat$concat, _ref;
      var sps = track.sps.length > 0 ? track.sps[0] : [];
      var pps = track.pps.length > 0 ? track.pps[0] : [];
      var width = track.width;
      var height = track.height;
      var hSpacing = track.sarRatio[0];
      var vSpacing = track.sarRatio[1];
      var content = new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        width >> 8 & 255,
        width & 255,
        height >> 8 & 255,
        height & 255,
        0,
        72,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        18,
        100,
        97,
        105,
        108,
        121,
        109,
        111,
        116,
        105,
        111,
        110,
        47,
        104,
        108,
        115,
        46,
        106,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        24,
        17,
        17
      ]);
      var avcc = new Uint8Array((_concat$concat = (_ref = [
        1,
        sps[1],
        sps[2],
        sps[3],
        252 | 3,
        224 | 1,
        sps.length >>> 8 & 255,
        sps.length & 255
      ]).concat.apply(_ref, _toConsumableArray(sps)).concat([1, pps.length >>> 8 & 255, pps.length & 255])).concat.apply(_concat$concat, _toConsumableArray(pps)));
      var btrt = new Uint8Array([0, 0, 88, 57, 0, 15, 200, 192, 0, 4, 86, 72]);
      var sinf = MP42.sinf(track.encv);
      var pasp = new Uint8Array([
        hSpacing >> 24,
        hSpacing >> 16 & 255,
        hSpacing >> 8 & 255,
        hSpacing & 255,
        vSpacing >> 24,
        vSpacing >> 16 & 255,
        vSpacing >> 8 & 255,
        vSpacing & 255
      ]);
      return MP42.box(MP42.types.encv, content, MP42.box(MP42.types.avcC, avcc), MP42.box(MP42.types.btrt, btrt), sinf, MP42.box(MP42.types.pasp, pasp));
    }
  }, {
    key: "schi",
    value: function schi(data) {
      var content = new Uint8Array([]);
      var tenc = MP42.tenc(data);
      return MP42.box(MP42.types.schi, content, tenc);
    }
  }, {
    key: "tenc",
    value: function tenc(data) {
      var content = new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        data.default_IsEncrypted & 255,
        data.default_IV_size & 255
      ].concat(parse(data.default_KID)));
      return MP42.box(MP42.types.tenc, content);
    }
  }, {
    key: "sinf",
    value: function sinf(data) {
      var content = new Uint8Array([]);
      var frma = new Uint8Array([data.data_format.charCodeAt(0), data.data_format.charCodeAt(1), data.data_format.charCodeAt(2), data.data_format.charCodeAt(3)]);
      var schm = new Uint8Array([
        0,
        0,
        0,
        0,
        99,
        101,
        110,
        99,
        0,
        1,
        0,
        0
      ]);
      var schi = MP42.schi(data);
      return MP42.box(MP42.types.sinf, content, MP42.box(MP42.types.frma, frma), MP42.box(MP42.types.schm, schm), schi);
    }
  }, {
    key: "avc1hev1",
    value: function avc1hev1(track) {
      var isHevc = track.codecType === VideoCodecType.HEVC;
      var typ = isHevc ? MP42.types.hvc1 : MP42.types.avc1;
      var config = isHevc ? MP42.hvcC(track) : MP42.avcC(track);
      var boxes = [new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        track.width >> 8 & 255,
        track.width & 255,
        track.height >> 8 & 255,
        track.height & 255,
        0,
        72,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        24,
        17,
        17
      ]), config];
      if (isHevc) {
        boxes.push(MP42.box(MP42.types.fiel, new Uint8Array([1, 0])));
      } else if (track.sarRatio && track.sarRatio.length > 1) {
        boxes.push(MP42.pasp(track.sarRatio));
      }
      return MP42.box.apply(MP42, [typ].concat(boxes));
    }
  }, {
    key: "avcC",
    value: function avcC(track) {
      var _concat$concat2, _ref2;
      var sps = [];
      var pps = [];
      var len;
      track.sps.forEach(function(s) {
        len = s.byteLength;
        sps.push(len >>> 8 & 255);
        sps.push(len & 255);
        sps.push.apply(sps, _toConsumableArray(s));
      });
      track.pps.forEach(function(p) {
        len = p.byteLength;
        pps.push(len >>> 8 & 255);
        pps.push(len & 255);
        pps.push.apply(pps, _toConsumableArray(p));
      });
      return MP42.box(MP42.types.avcC, new Uint8Array((_concat$concat2 = (_ref2 = [
        1,
        sps[3],
        sps[4],
        sps[5],
        252 | 3,
        224 | track.sps.length
      ]).concat.apply(_ref2, sps).concat([track.pps.length])).concat.apply(_concat$concat2, pps)));
    }
  }, {
    key: "hvcC",
    value: function hvcC(track) {
      var hvcC2 = track.hvcC;
      if (hvcC2 instanceof ArrayBuffer || hvcC2 instanceof Uint8Array)
        return hvcC2;
      var vps = track.vps, sps = track.sps, pps = track.pps;
      var data;
      if (hvcC2) {
        var pcf = hvcC2.generalProfileCompatibilityFlags;
        var cif = hvcC2.generalConstraintIndicatorFlags;
        var numOfArrays = (vps.length && 1) + (sps.length && 1) + (pps.length && 1);
        data = [
          1,
          hvcC2.generalProfileSpace << 6 | hvcC2.generalTierFlag << 5 | hvcC2.generalProfileIdc,
          pcf >>> 24,
          pcf >>> 16,
          pcf >>> 8,
          pcf,
          cif[0],
          cif[1],
          cif[2],
          cif[3],
          cif[4],
          cif[5],
          hvcC2.generalLevelIdc,
          240,
          0,
          252,
          hvcC2.chromaFormatIdc | 252,
          hvcC2.bitDepthLumaMinus8 | 248,
          hvcC2.bitDepthChromaMinus8 | 248,
          0,
          0,
          hvcC2.numTemporalLayers << 3 | hvcC2.temporalIdNested << 2 | 3,
          numOfArrays
        ];
        var write = function write2(x) {
          var _data;
          data.push(x.length >> 8, x.length);
          (_data = data).push.apply(_data, _toConsumableArray(x));
        };
        if (vps.length) {
          data.push(160, 0, vps.length);
          vps.forEach(write);
        }
        if (sps.length) {
          data.push(161, 0, sps.length);
          sps.forEach(write);
        }
        if (pps.length) {
          data.push(162, 0, pps.length);
          pps.forEach(write);
        }
      } else {
        data = [
          1,
          1,
          96,
          0,
          0,
          0,
          144,
          0,
          0,
          0,
          0,
          0,
          93,
          240,
          0,
          252,
          253,
          248,
          248,
          0,
          0,
          15,
          3,
          160,
          0,
          1,
          0,
          24,
          64,
          1,
          12,
          1,
          255,
          255,
          1,
          96,
          0,
          0,
          3,
          0,
          144,
          0,
          0,
          3,
          0,
          0,
          3,
          0,
          93,
          153,
          152,
          9,
          161,
          0,
          1,
          0,
          45,
          66,
          1,
          1,
          1,
          96,
          0,
          0,
          3,
          0,
          144,
          0,
          0,
          3,
          0,
          0,
          3,
          0,
          93,
          160,
          2,
          128,
          128,
          45,
          22,
          89,
          153,
          164,
          147,
          43,
          154,
          128,
          128,
          128,
          130,
          0,
          0,
          3,
          0,
          2,
          0,
          0,
          3,
          0,
          50,
          16,
          162,
          0,
          1,
          0,
          7,
          68,
          1,
          193,
          114,
          180,
          98,
          64
        ];
      }
      return MP42.box(MP42.types.hvcC, new Uint8Array(data));
    }
  }, {
    key: "pasp",
    value: function pasp(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2), hSpacing = _ref4[0], vSpacing = _ref4[1];
      return MP42.box(MP42.types.pasp, new Uint8Array([hSpacing >> 24, hSpacing >> 16 & 255, hSpacing >> 8 & 255, hSpacing & 255, vSpacing >> 24, vSpacing >> 16 & 255, vSpacing >> 8 & 255, vSpacing & 255]));
    }
  }, {
    key: "mp4a",
    value: function mp4a(track) {
      return MP42.box(MP42.types.mp4a, new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        track.channelCount,
        0,
        16,
        0,
        0,
        0,
        0,
        track.sampleRate >> 8 & 255,
        track.sampleRate & 255,
        0,
        0
      ]), track.config.length ? MP42.esds(track.config) : void 0);
    }
  }, {
    key: "esds",
    value: function esds(config) {
      var len = config.length;
      var esds2 = MP42.box(MP42.types.esds, new Uint8Array([
        0,
        0,
        0,
        0,
        3,
        23 + len,
        0,
        0,
        0,
        4,
        15 + len,
        64,
        21,
        0,
        6,
        0,
        0,
        0,
        218,
        192,
        0,
        0,
        218,
        192,
        5
      ].concat([len]).concat(config).concat(
        [6, 1, 2]
      )));
      return esds2;
    }
  }, {
    key: "mvex",
    value: function mvex(tracks) {
      var mvex2 = MP42.box.apply(MP42, [MP42.types.mvex].concat(_toConsumableArray(tracks.map(function(t) {
        return MP42.trex(t.id);
      }))));
      return mvex2;
    }
  }, {
    key: "trex",
    value: function trex(id) {
      var trex2 = MP42.box(MP42.types.trex, new Uint8Array([
        0,
        0,
        0,
        0,
        id >> 24,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1
      ]));
      return trex2;
    }
  }, {
    key: "trex1",
    value: function trex1(id) {
      var trex = MP42.box(MP42.types.trex, new Uint8Array([
        0,
        0,
        0,
        0,
        id >> 24,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        0,
        0,
        0,
        1,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ]));
      return trex;
    }
  }, {
    key: "trex2",
    value: function trex2(id) {
      var trex = MP42.box(MP42.types.trex, new Uint8Array([
        0,
        0,
        0,
        0,
        id >> 24,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255,
        0,
        0,
        0,
        1,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0
      ]));
      return trex;
    }
  }, {
    key: "moof",
    value: function moof(tracks) {
      var moof2 = MP42.box.apply(MP42, [MP42.types.moof, MP42.mfhd(tracks[0].samples ? tracks[0].samples[0].gopId : 0)].concat(_toConsumableArray(tracks.map(function(t) {
        return MP42.traf(t);
      }))));
      return moof2;
    }
  }, {
    key: "mfhd",
    value: function mfhd(sequenceNumber) {
      var mfhd2 = MP42.box(MP42.types.mfhd, new Uint8Array([
        0,
        0,
        0,
        0,
        sequenceNumber >> 24,
        sequenceNumber >> 16 & 255,
        sequenceNumber >> 8 & 255,
        sequenceNumber & 255
      ]));
      return mfhd2;
    }
  }, {
    key: "traf",
    value: function traf(track) {
      var tfhd = MP42.tfhd(track.id);
      var tfdt = MP42.tfdt(track, track.baseMediaDecodeTime);
      var sencLength = 0;
      var samples;
      if (track.isVideo && track.videoSenc) {
        samples = track.videoSenc;
        samples.forEach(function(item) {
          sencLength = sencLength + 8;
          if (item.subsamples && item.subsamples.length) {
            sencLength = sencLength + 2;
            sencLength = sencLength + item.subsamples.length * 6;
          }
        });
      }
      track.videoSencLength = sencLength;
      if (!track.useEME || !track.isVideoEncryption && !track.isAudioEncryption) {
        var sdtp = MP42.sdtp(track);
        var offset = 16 + 20 + 8 + 16 + 8 + 8;
        return MP42.box(MP42.types.traf, tfhd, tfdt, sdtp, MP42.trun(track.samples, sdtp.byteLength + offset));
      } else if (track.isVideoEncryption) {
        if (track.isVideo) {
          var saiz = MP42.saiz(track);
          var saio = MP42.saio(track);
          var trun = MP42.trun1(track);
          var senc = MP42.senc(track);
          var traf2 = MP42.box(MP42.types.traf, tfhd, tfdt, saiz, saio, trun, senc);
          return traf2;
        } else {
          if (!track.isAudioEncryption) {
            var sbgp = MP42.sbgp();
            var _trun = MP42.trun1(track);
            return MP42.box(MP42.types.traf, tfhd, tfdt, sbgp, _trun);
          } else {
            var _sbgp = MP42.sbgp();
            var _saiz = MP42.saiz(track);
            var _saio = MP42.saio(track);
            var _senc = MP42.senc(track);
            var _trun2 = MP42.trun1(track);
            var _traf = MP42.box(MP42.types.traf, tfhd, tfdt, _sbgp, _saiz, _saio, _senc, _trun2);
            return _traf;
          }
        }
      } else {
        if (track.isVideo) {
          var _trun3 = MP42.trun1(track);
          return MP42.box(MP42.types.traf, tfhd, tfdt, _trun3);
        } else {
          var _sbgp2 = MP42.sbgp();
          var _saiz2 = MP42.saiz(track);
          var _saio2 = MP42.saio(track);
          var _senc2 = MP42.senc(track);
          var _trun4 = MP42.trun1(track);
          var _traf2 = MP42.box(MP42.types.traf, tfhd, tfdt, _sbgp2, _saiz2, _saio2, _senc2, _trun4);
          return _traf2;
        }
      }
    }
  }, {
    key: "sdtp",
    value: function sdtp(data) {
      var buffer = new Buffer();
      data.samples.forEach(function(item) {
        buffer.write(new Uint8Array(data.isVideo ? [item.keyframe ? 32 : 16] : [16]));
      });
      return MP42.box(MP42.types.sdtp, this.extension(0, 0), buffer.buffer);
    }
  }, {
    key: "trun1",
    value: function trun1(data) {
      var buffer = new Buffer();
      var sampleCount = Buffer.writeUint32(data.samples.length);
      var offset = null;
      if (data.isVideo) {
        var sencLength = data.videoSencLength;
        offset = Buffer.writeUint32(data.samples.length * 16 + sencLength + 149);
        if (!data.isVideoEncryption && data.isAudioEncryption) {
          offset = Buffer.writeUint32(data.samples.length * 16 + 92);
        }
      } else {
        var len = data.samples.length * 12 + 124;
        if (data.isAudioEncryption) {
          len = data.samples.length * 12 + 8 * data.audioSenc.length + 177;
        }
        offset = Buffer.writeUint32(len);
      }
      data.samples.forEach(function(item) {
        buffer.write(Buffer.writeUint32(item.duration));
        buffer.write(Buffer.writeUint32(item.size));
        buffer.write(Buffer.writeUint32(item.keyframe ? 33554432 : 65536));
        if (data.isVideo) {
          buffer.write(Buffer.writeUint32(item.cts ? item.cts : 0));
        }
      });
      return MP42.box(MP42.types.trun, this.extension(0, data.flags), sampleCount, offset, buffer.buffer);
    }
  }, {
    key: "senc",
    value: function senc(data) {
      var buffer = new Buffer();
      var len = data.samples.length;
      var ceil = data.isVideo ? 16 : 8;
      var flag = data.isVideo ? 2 : 0;
      var samples = [];
      var samplesLength = 0;
      if (data.isVideo) {
        samples = data.videoSenc;
        samplesLength = data.videoSencLength;
      } else {
        samples = data.audioSenc;
      }
      samplesLength = samplesLength || ceil * len;
      buffer.write(Buffer.writeUint32(16 + samplesLength), MP42.types.senc, this.extension(0, flag));
      buffer.write(Buffer.writeUint32(len));
      samples.forEach(function(item) {
        for (var i = 0; i < item.InitializationVector.length; i++) {
          buffer.write(new Uint8Array([item.InitializationVector[i]]));
        }
        if (item.subsamples && item.subsamples.length) {
          buffer.write(Buffer.writeUint16(item.subsamples.length));
          item.subsamples.forEach(function(value) {
            buffer.write(Buffer.writeUint16(value.BytesOfClearData));
            buffer.write(Buffer.writeUint32(value.BytesOfProtectedData));
          });
        }
      });
      return buffer.buffer;
    }
  }, {
    key: "saio",
    value: function saio(data) {
      var length = data.samples.length * 12 + 141;
      if (!data.isVideo && data.isAudioEncryption) {
        length = 149;
      }
      var content = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, length >> 24 & 255, length >> 16 & 255, length >> 8 & 255, length & 255]);
      return MP42.box(MP42.types.saio, content);
    }
  }, {
    key: "saiz",
    value: function saiz(data) {
      var samplesLength = data.samples.length;
      var content = new Uint8Array([
        0,
        0,
        0,
        0,
        16,
        samplesLength >> 24 & 255,
        samplesLength >> 16 & 255,
        samplesLength >> 8 & 255,
        samplesLength & 255
      ]);
      return MP42.box(MP42.types.saiz, content);
    }
  }, {
    key: "sbgp",
    value: function sbgp() {
      var content = new Uint8Array([
        114,
        111,
        108,
        108,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        25,
        0,
        0,
        0,
        1
      ]);
      return MP42.box(MP42.types.sbgp, this.extension(0, 0), content);
    }
  }, {
    key: "extension",
    value: function extension(version, flag) {
      return new Uint8Array([version, flag >> 16 & 255, flag >> 8 & 255, flag & 255]);
    }
  }, {
    key: "tfhd",
    value: function tfhd(id) {
      return MP42.box(MP42.types.tfhd, new Uint8Array([
        0,
        0,
        0,
        0,
        id >> 24,
        id >> 16 & 255,
        id >> 8 & 255,
        id & 255
      ]));
    }
  }, {
    key: "tfdt",
    value: function tfdt(data, baseMediaDecodeTime) {
      var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
      var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
      if (data.useEME && (data.isVideoEncryption || data.isAudioEncryption)) {
        return MP42.box(MP42.types.tfdt, new Uint8Array([
          0,
          0,
          0,
          0,
          lowerWordBaseMediaDecodeTime >> 24,
          lowerWordBaseMediaDecodeTime >> 16 & 255,
          lowerWordBaseMediaDecodeTime >> 8 & 255,
          lowerWordBaseMediaDecodeTime & 255
        ]));
      } else {
        return MP42.box(MP42.types.tfdt, new Uint8Array([
          1,
          0,
          0,
          0,
          upperWordBaseMediaDecodeTime >> 24,
          upperWordBaseMediaDecodeTime >> 16 & 255,
          upperWordBaseMediaDecodeTime >> 8 & 255,
          upperWordBaseMediaDecodeTime & 255,
          lowerWordBaseMediaDecodeTime >> 24,
          lowerWordBaseMediaDecodeTime >> 16 & 255,
          lowerWordBaseMediaDecodeTime >> 8 & 255,
          lowerWordBaseMediaDecodeTime & 255
        ]));
      }
    }
  }, {
    key: "trun",
    value: function trun(samples, offset) {
      var sampleLen = samples.length;
      var dataLen = 12 + 16 * sampleLen;
      offset += 8 + dataLen;
      var data = new Uint8Array(dataLen);
      data.set([
        0,
        0,
        15,
        1,
        sampleLen >>> 24 & 255,
        sampleLen >>> 16 & 255,
        sampleLen >>> 8 & 255,
        sampleLen & 255,
        offset >>> 24 & 255,
        offset >>> 16 & 255,
        offset >>> 8 & 255,
        offset & 255
      ], 0);
      for (var i = 0; i < sampleLen; i++) {
        var _samples$i = samples[i], duration = _samples$i.duration, size = _samples$i.size, _samples$i$flag = _samples$i.flag, flag = _samples$i$flag === void 0 ? {} : _samples$i$flag, _samples$i$cts = _samples$i.cts, cts = _samples$i$cts === void 0 ? 0 : _samples$i$cts;
        data.set([
          duration >>> 24 & 255,
          duration >>> 16 & 255,
          duration >>> 8 & 255,
          duration & 255,
          size >>> 24 & 255,
          size >>> 16 & 255,
          size >>> 8 & 255,
          size & 255,
          flag.isLeading << 2 | (flag.dependsOn === null || flag.dependsOn === void 0 ? 1 : flag.dependsOn),
          flag.isDependedOn << 6 | flag.hasRedundancy << 4 | flag.paddingValue << 1 | (flag.isNonSyncSample === null || flag.isNonSyncSample === void 0 ? 1 : flag.isNonSyncSample),
          flag.degradationPriority & 240 << 8,
          flag.degradationPriority & 15,
          cts >>> 24 & 255,
          cts >>> 16 & 255,
          cts >>> 8 & 255,
          cts & 255
        ], 12 + 16 * i);
      }
      return MP42.box(MP42.types.trun, data);
    }
  }, {
    key: "moovMP4",
    value: function moovMP4(tracks) {
      return MP42.box.apply(MP42, [MP42.types.moov, MP42.mvhd(tracks[0].duration, tracks[0].timescale)].concat(_toConsumableArray(tracks.map(function(t) {
        return MP42.trackMP4(t);
      }))));
    }
  }, {
    key: "trackMP4",
    value: function trackMP4(track) {
      return MP42.box(MP42.types.trak, MP42.tkhd(track.id, track.duration, track.width, track.height), MP42.mdiaMP4(track));
    }
  }, {
    key: "mdiaMP4",
    value: function mdiaMP4(track) {
      return MP42.box(MP42.types.mdia, MP42.mdhd(track.duration, track.timescale), MP42.hdlr(track.type), MP42.minfMP4(track));
    }
  }, {
    key: "minfMP4",
    value: function minfMP4(track) {
      return MP42.box(MP42.types.minf, track.type === TrackType.VIDEO ? MP42.VMHD : MP42.SMHD, MP42.DINF, MP42.stblMP4(track));
    }
  }, {
    key: "stblMP4",
    value: function stblMP4(track) {
      var ext = track.ext;
      var boxes = [MP42.stsd(track), MP42.stts(ext.stts), MP42.stsc(ext.stsc), MP42.stsz(ext.stsz), MP42.stco(ext.stco)];
      if (ext.stss.length) {
        boxes.push(MP42.stss(ext.stss));
      }
      if (ext.ctts.length) {
        boxes.push(MP42.ctts(ext.ctts));
      }
      return MP42.box.apply(MP42, [MP42.types.stbl].concat(boxes));
    }
  }, {
    key: "stts",
    value: function stts(samples) {
      var len = samples.length;
      var data = new Uint8Array(8 * len);
      var offset = 0;
      samples.forEach(function(_ref5) {
        var value = _ref5.value, count = _ref5.count;
        data.set([count >> 24, count >> 16 & 255, count >> 8 & 255, count & 255, value >> 24, value >> 16 & 255, value >> 8 & 255, value & 255], offset);
        offset += 8;
      });
      return MP42.box(MP42.types.stts, concatUint8Array(new Uint8Array([0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "stsc",
    value: function stsc(entries) {
      var len = entries.length;
      var data = new Uint8Array(12 * len);
      var offset = 0;
      entries.forEach(function(_ref6) {
        var firstChunk = _ref6.firstChunk, samplesPerChunk = _ref6.samplesPerChunk, sampleDescIndex = _ref6.sampleDescIndex;
        data.set([firstChunk >> 24, firstChunk >> 16 & 255, firstChunk >> 8 & 255, firstChunk & 255, samplesPerChunk >> 24, samplesPerChunk >> 16 & 255, samplesPerChunk >> 8 & 255, samplesPerChunk & 255, sampleDescIndex >> 24, sampleDescIndex >> 16 & 255, sampleDescIndex >> 8 & 255, sampleDescIndex & 255], offset);
        offset += 12;
      });
      return MP42.box(MP42.types.stsc, concatUint8Array(new Uint8Array([0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "stsz",
    value: function stsz(samplesSizes) {
      var len = samplesSizes.length;
      var data = new Uint8Array(4 * len);
      var offset = 0;
      samplesSizes.forEach(function(x) {
        data.set([x >> 24, x >> 16 & 255, x >> 8 & 255, x & 255], offset);
        offset += 4;
      });
      return MP42.box(MP42.types.stsz, concatUint8Array(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "stco",
    value: function stco(offsets) {
      var len = offsets.length;
      var data = new Uint8Array(4 * len);
      var offset = 0;
      offsets.forEach(function(x) {
        data.set([x >> 24, x >> 16 & 255, x >> 8 & 255, x & 255], offset);
        offset += 4;
      });
      return MP42.box(MP42.types.stco, concatUint8Array(new Uint8Array([0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "stss",
    value: function stss(keyframeIndexes) {
      var len = keyframeIndexes.length;
      var data = new Uint8Array(4 * len);
      var offset = 0;
      keyframeIndexes.forEach(function(x) {
        data.set([x >> 24, x >> 16 & 255, x >> 8 & 255, x & 255], offset);
        offset += 4;
      });
      return MP42.box(MP42.types.stss, concatUint8Array(new Uint8Array([0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "ctts",
    value: function ctts(samples) {
      var len = samples.length;
      var data = new Uint8Array(8 * len);
      var offset = 0;
      samples.forEach(function(_ref7) {
        var value = _ref7.value, count = _ref7.count;
        data.set([count >> 24, count >> 16 & 255, count >> 8 & 255, count & 255, value >> 24, value >> 16 & 255, value >> 8 & 255, value & 255], offset);
        offset += 8;
      });
      return MP42.box(MP42.types.ctts, concatUint8Array(new Uint8Array([0, 0, 0, 0, len >> 24, len >> 16 & 255, len >> 8 & 255, len & 255]), data));
    }
  }, {
    key: "styp",
    value: function styp() {
      return MP42.box(MP42.types.styp, new Uint8Array([109, 115, 100, 104, 0, 0, 0, 0, 109, 115, 100, 104, 109, 115, 105, 120]));
    }
  }, {
    key: "sidx",
    value: function sidx(data) {
      var timescale = data.timescale;
      var duration = data.samples[0].duration;
      var durationCount = duration * data.samples.length;
      var earliestTime = data.samples[0].sampleOffset * duration;
      var mdatSize = 8;
      data.samples.forEach(function(item) {
        mdatSize += item.size;
      });
      var length = 0;
      if (data.isVideo) {
        var sencLength = 0;
        var samples;
        if (data.videoSenc) {
          samples = data.videoSenc;
        }
        if (data.isVideo) {
          samples.forEach(function(item) {
            sencLength = sencLength + 8;
            if (item.subsamples && item.subsamples.length) {
              sencLength = sencLength + 2;
              sencLength = sencLength + item.subsamples.length * 6;
            }
          });
        }
        data.videoSencLength = sencLength;
        length = mdatSize + 141 + data.samples.length * 16 + sencLength;
        if (data.useEME && data.isAudioEncryption && !data.isVideoEncryption) {
          length = mdatSize + data.samples.length * 16 + 84;
        }
      } else {
        length = mdatSize + 116 + data.samples.length * 12;
        if (data.useEME && data.isAudioEncryption) {
          length = mdatSize + 169 + data.samples.length * 12 + 8 * data.audioSenc.length;
        }
      }
      var content = new Uint8Array([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        data.id & 255,
        timescale >> 24 & 255,
        timescale >> 16 & 255,
        timescale >> 8 & 255,
        timescale & 255,
        earliestTime >> 24 & 255,
        earliestTime >> 16 & 255,
        earliestTime >> 8 & 255,
        earliestTime & 255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        length >> 16 & 255,
        length >> 8 & 255,
        length & 255,
        durationCount >> 24 & 255,
        durationCount >> 16 & 255,
        durationCount >> 8 & 255,
        durationCount & 255,
        144,
        0,
        0,
        0
      ]);
      return MP42.box(MP42.types.sidx, content);
    }
  }, {
    key: "mdat",
    value: function mdat(data) {
      var mdat2 = MP42.box(MP42.types.mdat, data);
      return mdat2;
    }
  }]);
  return MP42;
}();
_defineProperty(MP4, "types", ["avc1", "avcC", "hvc1", "hvcC", "dinf", "dref", "esds", "ftyp", "hdlr", "mdat", "mdhd", "mdia", "mfhd", "minf", "moof", "moov", "mp4a", "mvex", "mvhd", "pasp", "stbl", "stco", "stsc", "stsd", "stsz", "stts", "tfdt", "tfhd", "traf", "trak", "trex", "tkhd", "vmhd", "smhd", "ctts", "stss", "styp", "pssh", "sidx", "sbgp", "saiz", "saio", "senc", "trun", "encv", "enca", "sinf", "btrt", "frma", "tenc", "schm", "schi", "mehd", "fiel", "sdtp"].reduce(function(p, c) {
  p[c] = [c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2), c.charCodeAt(3)];
  return p;
}, /* @__PURE__ */ Object.create(null)));
_defineProperty(MP4, "HDLR_TYPES", {
  video: new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118,
    105,
    100,
    101,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    86,
    105,
    100,
    101,
    111,
    72,
    97,
    110,
    100,
    108,
    101,
    114,
    0
  ]),
  audio: new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    115,
    111,
    117,
    110,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    83,
    111,
    117,
    110,
    100,
    72,
    97,
    110,
    100,
    108,
    101,
    114,
    0
  ])
});
_defineProperty(MP4, "FTYPAVC1", MP4.box(MP4.types.ftyp, new Uint8Array([
  105,
  115,
  111,
  109,
  0,
  0,
  0,
  1,
  105,
  115,
  111,
  109,
  97,
  118,
  99,
  49
])));
_defineProperty(MP4, "FTYPHEV1", MP4.box(MP4.types.ftyp, new Uint8Array([
  105,
  115,
  111,
  109,
  0,
  0,
  0,
  1,
  105,
  115,
  111,
  109,
  104,
  101,
  118,
  49
])));
_defineProperty(MP4, "DINF", MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  12,
  117,
  114,
  108,
  32,
  0,
  0,
  0,
  1
]))));
_defineProperty(MP4, "VMHD", MP4.box(MP4.types.vmhd, new Uint8Array([
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
])));
_defineProperty(MP4, "SMHD", MP4.box(MP4.types.smhd, new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
])));
_defineProperty(MP4, "StblTable", new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
]));
_defineProperty(MP4, "STTS", MP4.box(MP4.types.stts, MP4.StblTable));
_defineProperty(MP4, "STSC", MP4.box(MP4.types.stsc, MP4.StblTable));
_defineProperty(MP4, "STSZ", MP4.box(MP4.types.stsz, new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
])));
_defineProperty(MP4, "STCO", MP4.box(MP4.types.stco, MP4.StblTable));
export { MP4 };
