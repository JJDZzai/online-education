import { createClass as _createClass, classCallCheck as _classCallCheck } from "../_virtual/_rollupPluginBabelHelpers.js";
import { WarningType } from "../model/types.js";
import { AudioSample } from "../model/audio-sample.js";
import "../utils/logger.js";
import { isSafari } from "../utils/env.js";
import { AAC } from "../codec/aac.js";
var LARGE_AV_FIRST_FRAME_GAP = 9e4 / 2;
var AUDIO_GAP_OVERLAP_THRESHOLD_COUNT = 3;
var MAX_SILENT_FRAME_DURATION = 9e4;
var AUDIO_EXCETION_LOG_EMIT_DURATION = 5 * 9e4;
var MAX_VIDEO_FRAME_DURATION = 9e4;
var MAX_DTS_DELTA_WITH_NEXT_CHUNK = 9e4 / 2;
var TsFixer = /* @__PURE__ */ function() {
  function TsFixer2(videoTrack, audioTrack, metadataTrack) {
    _classCallCheck(this, TsFixer2);
    this.videoTrack = videoTrack;
    this.audioTrack = audioTrack;
    this.metadataTrack = metadataTrack;
    this._baseDts = -1;
    this._baseDtsInited = false;
    this._audioNextPts = void 0;
    this._videoNextDts = void 0;
    this._audioTimestampBreak = false;
    this._videoTimestampBreak = false;
    this._lastAudioExceptionGapDot = 0;
    this._lastAudioExceptionOverlapDot = 0;
    this._lastAudioExceptionLargeGapDot = 0;
  }
  _createClass(TsFixer2, [{
    key: "fix",
    value: function fix() {
      var _this = this;
      var startTime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var discontinuity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var contiguous = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      startTime = Math.round(startTime * 9e4);
      var videoTrack = this.videoTrack;
      var audioTrack = this.audioTrack;
      var vSamples = videoTrack.samples;
      var aSamples = audioTrack.samples;
      if (!vSamples.length && !aSamples.length)
        return;
      var firstVideoSample = vSamples[0];
      var firstAudioSample = aSamples[0];
      var vaDelta = 0;
      if (vSamples.length && aSamples.length) {
        vaDelta = firstVideoSample.dts - firstAudioSample.pts;
      }
      if (!this._baseDtsInited) {
        this._calculateBaseDts(this.audioTrack, this.videoTrack);
      }
      if (discontinuity) {
        this._calculateBaseDts(this.audioTrack, this.videoTrack);
        this._baseDts -= startTime;
      }
      if (!contiguous) {
        this._videoNextDts = vaDelta > 0 ? startTime + vaDelta : startTime;
        this._audioNextPts = vaDelta > 0 ? startTime : startTime - vaDelta;
        var vDeltaToNextDts = firstVideoSample ? firstVideoSample.dts - this._baseDts - this._videoNextDts : 0;
        var aDeltaToNextDts = firstAudioSample ? firstAudioSample.pts - this._baseDts - this._audioNextPts : 0;
        if (Math.abs(vDeltaToNextDts || aDeltaToNextDts) > MAX_VIDEO_FRAME_DURATION) {
          this._calculateBaseDts(this.audioTrack, this.videoTrack);
          this._baseDts -= startTime;
        }
      }
      this._resetBaseDtsWhenStreamBreaked();
      this._fixAudio(audioTrack);
      this._fixVideo(videoTrack);
      if (this.metadataTrack.exist()) {
        var timescale = this.metadataTrack.timescale;
        this.metadataTrack.seiSamples.forEach(function(s) {
          s.pts = s.originPts - _this._baseDts;
          s.time = Math.max(0, s.pts) / timescale;
        });
      }
      if (videoTrack.samples.length) {
        videoTrack.baseMediaDecodeTime = videoTrack.samples[0].dts;
      }
      if (audioTrack.samples.length) {
        audioTrack.baseMediaDecodeTime = audioTrack.samples[0].pts * audioTrack.timescale / 9e4;
      }
    }
  }, {
    key: "_fixVideo",
    value: function _fixVideo(videoTrack) {
      var _this2 = this;
      var samples = videoTrack.samples;
      if (!samples.length)
        return;
      samples.forEach(function(x) {
        x.dts -= _this2._baseDts;
        x.pts -= _this2._baseDts;
      });
      if (this._videoNextDts === void 0) {
        var samp0 = samples[0];
        this._videoNextDts = samp0.dts;
      }
      var len = samples.length;
      var sampleDuration = 0;
      var firstSample = samples[0];
      var nextSample = samples[1];
      var vDelta = this._videoNextDts - firstSample.dts;
      if (Math.abs(vDelta) > MAX_DTS_DELTA_WITH_NEXT_CHUNK) {
        var _samples$;
        firstSample.dts += vDelta;
        firstSample.pts += vDelta;
        videoTrack.warnings.push({
          type: WarningType.LARGE_VIDEO_GAP_BETWEEN_CHUNK,
          nextDts: this._videoNextDts,
          firstSampleDts: firstSample.dts,
          nextSampleDts: (_samples$ = samples[1]) === null || _samples$ === void 0 ? void 0 : _samples$.dts,
          sampleDuration: vDelta
        });
        if (nextSample && Math.abs(nextSample.dts - firstSample.dts) > MAX_VIDEO_FRAME_DURATION) {
          this._videoTimestampBreak = true;
          samples.forEach(function(x, i2) {
            if (i2 === 0)
              return;
            x.dts += vDelta;
            x.pts += vDelta;
          });
        }
      }
      var refSampleDurationInt;
      if (videoTrack.fpsNum && videoTrack.fpsDen) {
        refSampleDurationInt = videoTrack.timescale * (videoTrack.fpsDen / videoTrack.fpsNum);
      } else {
        var first = videoTrack.samples[0];
        var last = videoTrack.samples[len - 1];
        refSampleDurationInt = len === 1 ? 9e3 : Math.floor((last.dts - first.dts) / (len - 1));
      }
      for (var i = 0; i < len; i++) {
        var dts = samples[i].dts;
        var _nextSample = samples[i + 1];
        if (i < len - 1) {
          sampleDuration = _nextSample.dts - dts;
        } else if (samples[i - 1]) {
          sampleDuration = Math.min(dts - samples[i - 1].dts, refSampleDurationInt);
        } else {
          sampleDuration = refSampleDurationInt;
        }
        if (sampleDuration > MAX_VIDEO_FRAME_DURATION || sampleDuration < 0) {
          this._videoTimestampBreak = true;
          sampleDuration = this._audioTimestampBreak ? refSampleDurationInt : Math.max(sampleDuration, 30 * 90);
          var expectFragEnd = this._audioNextPts || 0;
          if (_nextSample && _nextSample.dts > expectFragEnd) {
            sampleDuration = refSampleDurationInt;
          }
          videoTrack.warnings.push({
            type: WarningType.LARGE_VIDEO_GAP,
            time: dts / videoTrack.timescale,
            dts,
            originDts: samples[i].originDts,
            nextDts: this._videoNextDts,
            sampleDuration,
            refSampleDuration: refSampleDurationInt
          });
        }
        samples[i].duration = sampleDuration;
        this._videoNextDts += sampleDuration;
      }
    }
  }, {
    key: "_fixAudio",
    value: function _fixAudio(audioTrack) {
      var _this3 = this;
      var samples = audioTrack.samples;
      if (!samples.length)
        return;
      samples.forEach(function(x) {
        x.pts -= _this3._baseDts;
        x.dts = x.pts;
      });
      this._doFixAudioInternal(audioTrack, samples, 9e4);
    }
  }, {
    key: "_calculateBaseDts",
    value: function _calculateBaseDts(audioTrack, videoTrack) {
      var audioSamps = audioTrack.samples;
      var videoSamps = videoTrack.samples;
      if (!audioSamps.length && !videoSamps.length) {
        return false;
      }
      var audioBasePts = Infinity;
      var videoBaseDts = Infinity;
      if (audioSamps.length) {
        audioTrack.baseDts = audioBasePts = audioSamps[0].pts;
      }
      if (videoSamps.length) {
        videoTrack.baseDts = videoBaseDts = videoSamps[0].dts;
      }
      this._baseDts = Math.min(audioBasePts, videoBaseDts);
      var delta = videoBaseDts - audioBasePts;
      if (Number.isFinite(delta) && Math.abs(delta) > LARGE_AV_FIRST_FRAME_GAP) {
        videoTrack.warnings.push({
          type: WarningType.LARGE_AV_SHIFT,
          videoBaseDts,
          audioBasePts,
          baseDts: this._baseDts,
          delta
        });
      }
      this._baseDtsInited = true;
      return true;
    }
  }, {
    key: "_resetBaseDtsWhenStreamBreaked",
    value: function _resetBaseDtsWhenStreamBreaked() {
      if (this._baseDtsInited && this._videoTimestampBreak && this._audioTimestampBreak) {
        var calc = this._calculateBaseDts(this.audioTrack, this.videoTrack);
        if (!calc)
          return;
        this._baseDts -= Math.min(this._audioNextPts, this._videoNextDts);
        this._audioLastSample = null;
        this._videoLastSample = null;
        this._videoTimestampBreak = false;
        this._audioTimestampBreak = false;
      }
    }
  }, {
    key: "_doFixAudioInternal",
    value: function _doFixAudioInternal(audioTrack, samples, timescale) {
      if (!audioTrack.sampleDuration)
        audioTrack.sampleDuration = AAC.getFrameDuration(audioTrack.timescale, timescale);
      var refSampleDuration = audioTrack.sampleDuration;
      if (this._audioNextPts === void 0) {
        var samp0 = samples[0];
        this._audioNextPts = samp0.pts;
      }
      for (var i = 0; i < samples.length; i++) {
        var nextPts = this._audioNextPts;
        var sample = samples[i];
        var delta = sample.pts - nextPts;
        if (!this._audioTimestampBreak && delta >= AUDIO_GAP_OVERLAP_THRESHOLD_COUNT * refSampleDuration && delta <= MAX_SILENT_FRAME_DURATION && !isSafari) {
          var silentFrame = AAC.getSilentFrame(audioTrack.codec, audioTrack.channelCount) || samples[0].data.subarray();
          var count = Math.floor(delta / refSampleDuration);
          if (Math.abs(sample.pts - this._lastAudioExceptionGapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
            this._lastAudioExceptionGapDot = sample.pts;
          }
          audioTrack.warnings.push({
            type: WarningType.AUDIO_FILLED,
            pts: sample.pts,
            originPts: sample.originPts,
            count,
            nextPts,
            refSampleDuration
          });
          for (var j = 0; j < count; j++) {
            var silentSample = new AudioSample(Math.floor(nextPts), silentFrame);
            silentSample.originPts = Math.floor(this._baseDts + nextPts);
            samples.splice(i, 0, silentSample);
            this._audioNextPts += refSampleDuration;
            i++;
          }
          i--;
        } else if (delta <= -AUDIO_GAP_OVERLAP_THRESHOLD_COUNT * refSampleDuration && delta >= -1 * MAX_SILENT_FRAME_DURATION) {
          if (Math.abs(sample.pts - this._lastAudioExceptionOverlapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
            this._lastAudioExceptionOverlapDot = sample.pts;
            audioTrack.warnings.push({
              type: WarningType.AUDIO_DROPPED,
              pts: sample.pts,
              originPts: sample.originPts,
              nextPts,
              refSampleDuration
            });
          }
          samples.splice(i, 1);
          i--;
        } else {
          if (Math.abs(delta) >= MAX_SILENT_FRAME_DURATION) {
            this._audioTimestampBreak = true;
            if (Math.abs(sample.pts - this._lastAudioExceptionLargeGapDot) > AUDIO_EXCETION_LOG_EMIT_DURATION) {
              this._lastAudioExceptionLargeGapDot = sample.pts;
              audioTrack.warnings.push({
                type: WarningType.LARGE_AUDIO_GAP,
                time: sample.pts / 1e3,
                pts: sample.pts,
                originPts: sample.originPts,
                nextPts,
                sampleDuration: delta,
                refSampleDuration
              });
            }
          }
          sample.dts = sample.pts = nextPts;
          this._audioNextPts += refSampleDuration;
        }
      }
    }
  }]);
  return TsFixer2;
}();
export { TsFixer };
