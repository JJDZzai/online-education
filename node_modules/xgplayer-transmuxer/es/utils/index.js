export { Logger } from "./logger.js";
export { isAndroid, isBrowser, isFirefox, isSafari } from "./env.js";
function concatUint8Array() {
  for (var _len = arguments.length, arr = new Array(_len), _key = 0; _key < _len; _key++) {
    arr[_key] = arguments[_key];
  }
  arr = arr.filter(Boolean);
  var data = new Uint8Array(arr.reduce(function(p, c) {
    return p + c.byteLength;
  }, 0));
  var prevLen = 0;
  arr.forEach(function(d) {
    data.set(d, prevLen);
    prevLen += d.byteLength;
  });
  return data;
}
var MAX_SIZE = Math.pow(2, 32);
function readBig16(data) {
  var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return (data[i] << 8) + (data[i + 1] || 0);
}
function readBig24(data) {
  var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return (data[i] << 16) + (data[i + 1] << 8) + (data[i + 2] || 0);
}
function readBig32(data) {
  var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return (data[i] << 24 >>> 0) + (data[i + 1] << 16) + (data[i + 2] << 8) + (data[i + 3] || 0);
}
function readBig64(data) {
  var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return readBig32(data, i) * MAX_SIZE + readBig32(data, i + 4);
}
function getAvcCodec(codecs) {
  var codec = "avc1.";
  var h;
  for (var i = 0; i < 3; i++) {
    h = codecs[i].toString(16);
    if (h.length < 2)
      h = "0".concat(h);
    codec += h;
  }
  return codec;
}
function formatIV(arr) {
  var iv = "";
  arr.forEach(function(value) {
    iv += bufferToString(value);
  });
  if (iv.length <= 32) {
    var len = 32 - iv.length;
    for (var i = 0; i < len; i++) {
      iv += "0";
    }
  }
  return iv;
}
function parse(a) {
  if (!Array.isArray(a)) {
    var arr = [];
    var value = "";
    for (var i = 0; i < a.length; i++) {
      if (i % 2) {
        value = a[i - 1] + a[i];
        arr.push(parseInt(value, 16));
        value = "";
      }
    }
    return arr;
  }
  return a.map(function(item) {
    return parseInt(item, 16);
  });
}
function bufferToString(value) {
  return ("0" + Number(value).toString(16)).slice(-2).toUpperCase();
}
export { MAX_SIZE, concatUint8Array, formatIV, getAvcCodec, parse, readBig16, readBig24, readBig32, readBig64 };
